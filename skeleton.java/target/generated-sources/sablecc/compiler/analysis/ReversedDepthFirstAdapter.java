/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAIfProgram(AIfProgram node)
    {
        defaultIn(node);
    }

    public void outAIfProgram(AIfProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfProgram(AIfProgram node)
    {
        inAIfProgram(node);
        if(node.getSelectionStatement() != null)
        {
            node.getSelectionStatement().apply(this);
        }
        outAIfProgram(node);
    }

    public void inAOneSelectionStatement(AOneSelectionStatement node)
    {
        defaultIn(node);
    }

    public void outAOneSelectionStatement(AOneSelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneSelectionStatement(AOneSelectionStatement node)
    {
        inAOneSelectionStatement(node);
        if(node.getSelectionStatement() != null)
        {
            node.getSelectionStatement().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAOneSelectionStatement(node);
    }

    public void inATwoSelectionStatement(ATwoSelectionStatement node)
    {
        defaultIn(node);
    }

    public void outATwoSelectionStatement(ATwoSelectionStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoSelectionStatement(ATwoSelectionStatement node)
    {
        inATwoSelectionStatement(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outATwoSelectionStatement(node);
    }

    public void inACondition(ACondition node)
    {
        defaultIn(node);
    }

    public void outACondition(ACondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        inACondition(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACondition(node);
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAOneProgram(AOneProgram node)
    {
        defaultIn(node);
    }

    public void outAOneProgram(AOneProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneProgram(AOneProgram node)
    {
        inAOneProgram(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAOneProgram(node);
    }

    public void inASimpleFuncDef(ASimpleFuncDef node)
    {
        defaultIn(node);
    }

    public void outASimpleFuncDef(ASimpleFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFuncDef(ASimpleFuncDef node)
    {
        inASimpleFuncDef(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            Collections.reverse(copy);
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outASimpleFuncDef(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        inAInnerDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAInnerDeclLocalDef(node);
    }

    public void inAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        inAInnerDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAInnerDefLocalDef(node);
    }

    public void inAInnerVarsLocalDef(AInnerVarsLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerVarsLocalDef(AInnerVarsLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerVarsLocalDef(AInnerVarsLocalDef node)
    {
        inAInnerVarsLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAInnerVarsLocalDef(node);
    }

    public void inAFuncHeaderHeader(AFuncHeaderHeader node)
    {
        defaultIn(node);
    }

    public void outAFuncHeaderHeader(AFuncHeaderHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncHeaderHeader(AFuncHeaderHeader node)
    {
        inAFuncHeaderHeader(node);
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFparList() != null)
        {
            node.getFparList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwFun() != null)
        {
            node.getKwFun().apply(this);
        }
        outAFuncHeaderHeader(node);
    }

    public void inAMultiFparList(AMultiFparList node)
    {
        defaultIn(node);
    }

    public void outAMultiFparList(AMultiFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiFparList(AMultiFparList node)
    {
        inAMultiFparList(node);
        if(node.getFparList() != null)
        {
            node.getFparList().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAMultiFparList(node);
    }

    public void inASingleFparList(ASingleFparList node)
    {
        defaultIn(node);
    }

    public void outASingleFparList(ASingleFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFparList(ASingleFparList node)
    {
        inASingleFparList(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outASingleFparList(node);
    }

    public void inAByValFparDef(AByValFparDef node)
    {
        defaultIn(node);
    }

    public void outAByValFparDef(AByValFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByValFparDef(AByValFparDef node)
    {
        inAByValFparDef(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        outAByValFparDef(node);
    }

    public void inAByRefFparDef(AByRefFparDef node)
    {
        defaultIn(node);
    }

    public void outAByRefFparDef(AByRefFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByRefFparDef(AByRefFparDef node)
    {
        inAByRefFparDef(node);
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getKwRef() != null)
        {
            node.getKwRef().apply(this);
        }
        outAByRefFparDef(node);
    }

    public void inAVarDefVarDef(AVarDefVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefVarDef(AVarDefVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefVarDef(AVarDefVarDef node)
    {
        inAVarDefVarDef(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getKwVar() != null)
        {
            node.getKwVar().apply(this);
        }
        outAVarDefVarDef(node);
    }

    public void inAMultiSetIdList(AMultiSetIdList node)
    {
        defaultIn(node);
    }

    public void outAMultiSetIdList(AMultiSetIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiSetIdList(AMultiSetIdList node)
    {
        inAMultiSetIdList(node);
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMultiSetIdList(node);
    }

    public void inASingleSetIdList(ASingleSetIdList node)
    {
        defaultIn(node);
    }

    public void outASingleSetIdList(ASingleSetIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSetIdList(ASingleSetIdList node)
    {
        inASingleSetIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASingleSetIdList(node);
    }

    public void inATypeFparType(ATypeFparType node)
    {
        defaultIn(node);
    }

    public void outATypeFparType(ATypeFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeFparType(ATypeFparType node)
    {
        inATypeFparType(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        if(node.getEmptyArrayDeclarator() != null)
        {
            node.getEmptyArrayDeclarator().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outATypeFparType(node);
    }

    public void inASimpleType(ASimpleType node)
    {
        defaultIn(node);
    }

    public void outASimpleType(ASimpleType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleType(ASimpleType node)
    {
        inASimpleType(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outASimpleType(node);
    }

    public void inARetDataRetType(ARetDataRetType node)
    {
        defaultIn(node);
    }

    public void outARetDataRetType(ARetDataRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetDataRetType(ARetDataRetType node)
    {
        inARetDataRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outARetDataRetType(node);
    }

    public void inARetNothRetType(ARetNothRetType node)
    {
        defaultIn(node);
    }

    public void outARetNothRetType(ARetNothRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetNothRetType(ARetNothRetType node)
    {
        inARetNothRetType(node);
        if(node.getKwNothing() != null)
        {
            node.getKwNothing().apply(this);
        }
        outARetNothRetType(node);
    }

    public void inATIntDataType(ATIntDataType node)
    {
        defaultIn(node);
    }

    public void outATIntDataType(ATIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIntDataType(ATIntDataType node)
    {
        inATIntDataType(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outATIntDataType(node);
    }

    public void inATCharDataType(ATCharDataType node)
    {
        defaultIn(node);
    }

    public void outATCharDataType(ATCharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATCharDataType(ATCharDataType node)
    {
        inATCharDataType(node);
        if(node.getKwChar() != null)
        {
            node.getKwChar().apply(this);
        }
        outATCharDataType(node);
    }

    public void inAEmptyStmt(AEmptyStmt node)
    {
        defaultIn(node);
    }

    public void outAEmptyStmt(AEmptyStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStmt(AEmptyStmt node)
    {
        inAEmptyStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAEmptyStmt(node);
    }

    public void inAOneBlock(AOneBlock node)
    {
        defaultIn(node);
    }

    public void outAOneBlock(AOneBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneBlock(AOneBlock node)
    {
        inAOneBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outAOneBlock(node);
    }

    public void inAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        inAArrayDeclArrayDeclarator(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArrayDeclArrayDeclarator(node);
    }

    public void inAEmptyDeclArrayDeclarator(AEmptyDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclArrayDeclarator(AEmptyDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclArrayDeclarator(AEmptyDeclArrayDeclarator node)
    {
        inAEmptyDeclArrayDeclarator(node);
        outAEmptyDeclArrayDeclarator(node);
    }

    public void inAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node)
    {
        inAEmptyArrayDeclEmptyArrayDeclarator(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAEmptyArrayDeclEmptyArrayDeclarator(node);
    }

    public void inALvalIdLValue(ALvalIdLValue node)
    {
        defaultIn(node);
    }

    public void outALvalIdLValue(ALvalIdLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalIdLValue(ALvalIdLValue node)
    {
        inALvalIdLValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALvalIdLValue(node);
    }

    public void inALvalStrLValue(ALvalStrLValue node)
    {
        defaultIn(node);
    }

    public void outALvalStrLValue(ALvalStrLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalStrLValue(ALvalStrLValue node)
    {
        inALvalStrLValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outALvalStrLValue(node);
    }

    public void inALvalExprLValue(ALvalExprLValue node)
    {
        defaultIn(node);
    }

    public void outALvalExprLValue(ALvalExprLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalExprLValue(ALvalExprLValue node)
    {
        inALvalExprLValue(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALvalExprLValue(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASubExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        if(node.getKwDiv() != null)
        {
            node.getKwDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivTerm(node);
    }

    public void inAModTerm(AModTerm node)
    {
        defaultIn(node);
    }

    public void outAModTerm(AModTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        inAModTerm(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        if(node.getKwMod() != null)
        {
            node.getKwMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModTerm(node);
    }

    public void inASFactorTerm(ASFactorTerm node)
    {
        defaultIn(node);
    }

    public void outASFactorTerm(ASFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASFactorTerm(ASFactorTerm node)
    {
        inASFactorTerm(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outASFactorTerm(node);
    }

    public void inAPosSignedFactor(APosSignedFactor node)
    {
        defaultIn(node);
    }

    public void outAPosSignedFactor(APosSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosSignedFactor(APosSignedFactor node)
    {
        inAPosSignedFactor(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPosSignedFactor(node);
    }

    public void inANegSignedFactor(ANegSignedFactor node)
    {
        defaultIn(node);
    }

    public void outANegSignedFactor(ANegSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegSignedFactor(ANegSignedFactor node)
    {
        inANegSignedFactor(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegSignedFactor(node);
    }

    public void inAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultIn(node);
    }

    public void outAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorSignedFactor(AFactorSignedFactor node)
    {
        inAFactorSignedFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorSignedFactor(node);
    }

    public void inAFIntFactor(AFIntFactor node)
    {
        defaultIn(node);
    }

    public void outAFIntFactor(AFIntFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFIntFactor(AFIntFactor node)
    {
        inAFIntFactor(node);
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outAFIntFactor(node);
    }

    public void inAFParensFactor(AFParensFactor node)
    {
        defaultIn(node);
    }

    public void outAFParensFactor(AFParensFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFParensFactor(AFParensFactor node)
    {
        inAFParensFactor(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAFParensFactor(node);
    }
}

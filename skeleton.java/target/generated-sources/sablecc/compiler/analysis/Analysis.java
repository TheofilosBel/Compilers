/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFuncDef(AFuncDef node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAInnerDeclLocalDef(AInnerDeclLocalDef node);
    void caseAInnerDefLocalDef(AInnerDefLocalDef node);
    void caseAInnerVarLocalDef(AInnerVarLocalDef node);
    void caseAHeader(AHeader node);
    void caseAMultiFparList(AMultiFparList node);
    void caseASingleFparList(ASingleFparList node);
    void caseAFparDef(AFparDef node);
    void caseAVarDef(AVarDef node);
    void caseAMultiIdList(AMultiIdList node);
    void caseASingleIdList(ASingleIdList node);
    void caseAFparType(AFparType node);
    void caseAType(AType node);
    void caseADataRetType(ADataRetType node);
    void caseANothingRetType(ANothingRetType node);
    void caseAIntDataType(AIntDataType node);
    void caseACharDataType(ACharDataType node);
    void caseAMatchedStmt(AMatchedStmt node);
    void caseAUnmatchedStmt(AUnmatchedStmt node);
    void caseAIfMatched(AIfMatched node);
    void caseAWhileMatched(AWhileMatched node);
    void caseANoopMatched(ANoopMatched node);
    void caseAAssignMatched(AAssignMatched node);
    void caseABlockMatched(ABlockMatched node);
    void caseAFuncCallMatched(AFuncCallMatched node);
    void caseAReturnMatched(AReturnMatched node);
    void caseAIfUnmatched(AIfUnmatched node);
    void caseAWhileUnmatched(AWhileUnmatched node);
    void caseAMatchedIf(AMatchedIf node);
    void caseANoElseUnmatchedIf(ANoElseUnmatchedIf node);
    void caseAWithElseUnmatchedIf(AWithElseUnmatchedIf node);
    void caseAMatchedWhile(AMatchedWhile node);
    void caseAUnmatchedWhile(AUnmatchedWhile node);
    void caseABlock(ABlock node);
    void caseAFuncCall(AFuncCall node);
    void caseAMultiExprList(AMultiExprList node);
    void caseAEmptyExprList(AEmptyExprList node);
    void caseAExprListTail(AExprListTail node);
    void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node);
    void caseANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node);
    void caseAArrayDeclaratorTail(AArrayDeclaratorTail node);
    void caseAEmptyArrayDeclarator(AEmptyArrayDeclarator node);
    void caseAIdLValue(AIdLValue node);
    void caseAStrLValue(AStrLValue node);
    void caseAExprLValue(AExprLValue node);
    void caseAAddExpr(AAddExpr node);
    void caseASubExpr(ASubExpr node);
    void caseATermExpr(ATermExpr node);
    void caseAMultTerm(AMultTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModTerm(AModTerm node);
    void caseASFactorTerm(ASFactorTerm node);
    void caseAPosSignedFactor(APosSignedFactor node);
    void caseANegSignedFactor(ANegSignedFactor node);
    void caseAFactorSignedFactor(AFactorSignedFactor node);
    void caseAIntFactor(AIntFactor node);
    void caseACharFactor(ACharFactor node);
    void caseALvalFactor(ALvalFactor node);
    void caseAFuncFactor(AFuncFactor node);
    void caseAParensFactor(AParensFactor node);
    void caseAOrCond(AOrCond node);
    void caseACond1Cond(ACond1Cond node);
    void caseAAndCond1(AAndCond1 node);
    void caseACond2Cond1(ACond2Cond1 node);
    void caseANotCond2(ANotCond2 node);
    void caseACond3Cond2(ACond3Cond2 node);
    void caseAExprCmpCond3(AExprCmpCond3 node);
    void caseABoolCond3(ABoolCond3 node);
    void caseATrueBool(ATrueBool node);
    void caseAFalseBool(AFalseBool node);
    void caseACParensBool(ACParensBool node);
    void caseAEqCmpOp(AEqCmpOp node);
    void caseANeqCmpOp(ANeqCmpOp node);
    void caseALtCmpOp(ALtCmpOp node);
    void caseAGtCmpOp(AGtCmpOp node);
    void caseALeqCmpOp(ALeqCmpOp node);
    void caseAGeqCmpOp(AGeqCmpOp node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTComment(TComment node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTAssign(TAssign node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTKwAnd(TKwAnd node);
    void caseTKwOr(TKwOr node);
    void caseTKwInt(TKwInt node);
    void caseTKwThen(TKwThen node);
    void caseTKwChar(TKwChar node);
    void caseTKwMod(TKwMod node);
    void caseTKwVar(TKwVar node);
    void caseTKwDiv(TKwDiv node);
    void caseTKwNot(TKwNot node);
    void caseTKwWhile(TKwWhile node);
    void caseTKwDo(TKwDo node);
    void caseTKwIf(TKwIf node);
    void caseTKwElse(TKwElse node);
    void caseTKwFun(TKwFun node);
    void caseTKwReturn(TKwReturn node);
    void caseTKwRef(TKwRef node);
    void caseTKwNothing(TKwNothing node);
    void caseTIntConst(TIntConst node);
    void caseTCharConst(TCharConst node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseACondListProgram(ACondListProgram node);
    void caseAMultiCondList(AMultiCondList node);
    void caseAEmptyCondList(AEmptyCondList node);
    void caseACondListTailCondListTail(ACondListTailCondListTail node);
    void caseAVarListVarDefList(AVarListVarDefList node);
    void caseAFuncDefFuncDef(AFuncDefFuncDef node);
    void caseAFuncDeclFuncDecl(AFuncDeclFuncDecl node);
    void caseAInnerDeclLocalDef(AInnerDeclLocalDef node);
    void caseAInnerDefLocalDef(AInnerDefLocalDef node);
    void caseAInnerVarsLocalDef(AInnerVarsLocalDef node);
    void caseAHeaderHeader(AHeaderHeader node);
    void caseAMultiFparFparList(AMultiFparFparList node);
    void caseASingleFparFparList(ASingleFparFparList node);
    void caseAFparDefFparDef(AFparDefFparDef node);
    void caseAVarDefVarDef(AVarDefVarDef node);
    void caseAMultiIdList(AMultiIdList node);
    void caseASingleIdList(ASingleIdList node);
    void caseAFparTypeFparType(AFparTypeFparType node);
    void caseATypeType(ATypeType node);
    void caseARetDataRetType(ARetDataRetType node);
    void caseARetNothRetType(ARetNothRetType node);
    void caseATypeIntDataType(ATypeIntDataType node);
    void caseATypeCharDataType(ATypeCharDataType node);
    void caseAStmtEmptyStmt(AStmtEmptyStmt node);
    void caseABlockBlock(ABlockBlock node);
    void caseAFuncCallFuncCall(AFuncCallFuncCall node);
    void caseAMultiExprList(AMultiExprList node);
    void caseAEmptyExprList(AEmptyExprList node);
    void caseAExprListTailExprListTail(AExprListTailExprListTail node);
    void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node);
    void caseANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node);
    void caseAMultipleArrayDeclaratorTail(AMultipleArrayDeclaratorTail node);
    void caseAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node);
    void caseALvalIdLValue(ALvalIdLValue node);
    void caseALvalStrLValue(ALvalStrLValue node);
    void caseALvalExprLValue(ALvalExprLValue node);
    void caseAAddExpr(AAddExpr node);
    void caseASubExpr(ASubExpr node);
    void caseATermExpr(ATermExpr node);
    void caseAMultTerm(AMultTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModTerm(AModTerm node);
    void caseASFactorTerm(ASFactorTerm node);
    void caseAPosSignedFactor(APosSignedFactor node);
    void caseANegSignedFactor(ANegSignedFactor node);
    void caseAFactorSignedFactor(AFactorSignedFactor node);
    void caseAFIntFactor(AFIntFactor node);
    void caseAFCharFactor(AFCharFactor node);
    void caseAFLvalFactor(AFLvalFactor node);
    void caseAFFuncFactor(AFFuncFactor node);
    void caseAFParensFactor(AFParensFactor node);
    void caseAOrCond(AOrCond node);
    void caseACond1Cond(ACond1Cond node);
    void caseAAndCond1(AAndCond1 node);
    void caseACond2Cond1(ACond2Cond1 node);
    void caseANotCond2(ANotCond2 node);
    void caseACond3Cond2(ACond3Cond2 node);
    void caseAExprCmpCond3(AExprCmpCond3 node);
    void caseABoolCond3(ABoolCond3 node);
    void caseATrueBool(ATrueBool node);
    void caseAFalseBool(AFalseBool node);
    void caseACParensBool(ACParensBool node);
    void caseAEqCmpOp(AEqCmpOp node);
    void caseANeqCmpOp(ANeqCmpOp node);
    void caseALtCmpOp(ALtCmpOp node);
    void caseAGtCmpOp(AGtCmpOp node);
    void caseALeqCmpOp(ALeqCmpOp node);
    void caseAGeqCmpOp(AGeqCmpOp node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTComment(TComment node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTArrow(TArrow node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTKwAnd(TKwAnd node);
    void caseTKwOr(TKwOr node);
    void caseTKwInt(TKwInt node);
    void caseTKwThen(TKwThen node);
    void caseTKwChar(TKwChar node);
    void caseTKwMod(TKwMod node);
    void caseTKwVar(TKwVar node);
    void caseTKwDiv(TKwDiv node);
    void caseTKwNot(TKwNot node);
    void caseTKwWhile(TKwWhile node);
    void caseTKwDo(TKwDo node);
    void caseTKwIf(TKwIf node);
    void caseTKwElse(TKwElse node);
    void caseTKwFun(TKwFun node);
    void caseTKwReturn(TKwReturn node);
    void caseTKwRef(TKwRef node);
    void caseTKwNothing(TKwNothing node);
    void caseTIntConst(TIntConst node);
    void caseTCharConst(TCharConst node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}

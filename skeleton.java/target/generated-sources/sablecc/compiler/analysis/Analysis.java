/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAExistingLocalDefList(AExistingLocalDefList node);
    void caseANonExistingLocalDefList(ANonExistingLocalDefList node);
    void caseAFuncDefLocalDef(AFuncDefLocalDef node);
    void caseAFuncDecLocalDef(AFuncDecLocalDef node);
    void caseAVarDefLocalDef(AVarDefLocalDef node);
    void caseAFuncDef(AFuncDef node);
    void caseAFuncDec(AFuncDec node);
    void caseAFuncCall(AFuncCall node);
    void caseAExistingFparList(AExistingFparList node);
    void caseANonExistingFparList(ANonExistingFparList node);
    void caseAByrefFparDef(AByrefFparDef node);
    void caseAByvallFparDef(AByvallFparDef node);
    void caseAVarDef(AVarDef node);
    void caseAVariable(AVariable node);
    void caseAType(AType node);
    void caseAExistingArrayDec(AExistingArrayDec node);
    void caseANotExistingArrayDec(ANotExistingArrayDec node);
    void caseAIntDataType(AIntDataType node);
    void caseACharDataType(ACharDataType node);
    void caseANothDataType(ANothDataType node);
    void caseANoneDataType(ANoneDataType node);
    void caseAIfStmt(AIfStmt node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAFuncCallStmt(AFuncCallStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseANoopStmt(ANoopStmt node);
    void caseAAddExpr(AAddExpr node);
    void caseASubExpr(ASubExpr node);
    void caseAMultExpr(AMultExpr node);
    void caseADivExpr(ADivExpr node);
    void caseAModExpr(AModExpr node);
    void caseAPosExpr(APosExpr node);
    void caseANegExpr(ANegExpr node);
    void caseAIntExpr(AIntExpr node);
    void caseACharExpr(ACharExpr node);
    void caseALvalExpr(ALvalExpr node);
    void caseAFuncExpr(AFuncExpr node);
    void caseAStrLvalue(AStrLvalue node);
    void caseAIdLvalue(AIdLvalue node);
    void caseAArrayLvalue(AArrayLvalue node);
    void caseAOrCond(AOrCond node);
    void caseAAndCond(AAndCond node);
    void caseANotCond(ANotCond node);
    void caseAExprCmpCond(AExprCmpCond node);
    void caseATrueCond(ATrueCond node);
    void caseAFalseCond(AFalseCond node);
    void caseAEqCmpOp(AEqCmpOp node);
    void caseANeqCmpOp(ANeqCmpOp node);
    void caseALtCmpOp(ALtCmpOp node);
    void caseAGtCmpOp(AGtCmpOp node);
    void caseAGeqCmpOp(AGeqCmpOp node);
    void caseALeqCmpOp(ALeqCmpOp node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTComment(TComment node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTAssign(TAssign node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTKwAnd(TKwAnd node);
    void caseTKwOr(TKwOr node);
    void caseTKwInt(TKwInt node);
    void caseTKwThen(TKwThen node);
    void caseTKwChar(TKwChar node);
    void caseTKwMod(TKwMod node);
    void caseTKwVar(TKwVar node);
    void caseTKwDiv(TKwDiv node);
    void caseTKwNot(TKwNot node);
    void caseTKwWhile(TKwWhile node);
    void caseTKwDo(TKwDo node);
    void caseTKwIf(TKwIf node);
    void caseTKwElse(TKwElse node);
    void caseTKwFun(TKwFun node);
    void caseTKwReturn(TKwReturn node);
    void caseTKwRef(TKwRef node);
    void caseTKwNothing(TKwNothing node);
    void caseTIntConst(TIntConst node);
    void caseTCharConst(TCharConst node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTId(TId node);
    void caseEOF(EOF node);
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAExistingLocalDefList(AExistingLocalDefList node)
    {
        defaultIn(node);
    }

    public void outAExistingLocalDefList(AExistingLocalDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistingLocalDefList(AExistingLocalDefList node)
    {
        inAExistingLocalDefList(node);
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        outAExistingLocalDefList(node);
    }

    public void inANonExistingLocalDefList(ANonExistingLocalDefList node)
    {
        defaultIn(node);
    }

    public void outANonExistingLocalDefList(ANonExistingLocalDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExistingLocalDefList(ANonExistingLocalDefList node)
    {
        inANonExistingLocalDefList(node);
        outANonExistingLocalDefList(node);
    }

    public void inAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        inAFuncDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFuncDefLocalDef(node);
    }

    public void inAFuncDecLocalDef(AFuncDecLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDecLocalDef(AFuncDecLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecLocalDef(AFuncDecLocalDef node)
    {
        inAFuncDecLocalDef(node);
        if(node.getFuncDec() != null)
        {
            node.getFuncDec().apply(this);
        }
        outAFuncDecLocalDef(node);
    }

    public void inAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        inAVarDefLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVarDefLocalDef(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFplist() != null)
        {
            node.getFplist().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        if(node.getLocalDefs() != null)
        {
            node.getLocalDefs().apply(this);
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAFuncDec(AFuncDec node)
    {
        defaultIn(node);
    }

    public void outAFuncDec(AFuncDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDec(AFuncDec node)
    {
        inAFuncDec(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFplist() != null)
        {
            node.getFplist().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAFuncDec(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExprList());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncCall(node);
    }

    public void inAExistingFparList(AExistingFparList node)
    {
        defaultIn(node);
    }

    public void outAExistingFparList(AExistingFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistingFparList(AExistingFparList node)
    {
        inAExistingFparList(node);
        {
            List<PFparDef> copy = new ArrayList<PFparDef>(node.getArgs());
            for(PFparDef e : copy)
            {
                e.apply(this);
            }
        }
        outAExistingFparList(node);
    }

    public void inANonExistingFparList(ANonExistingFparList node)
    {
        defaultIn(node);
    }

    public void outANonExistingFparList(ANonExistingFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExistingFparList(ANonExistingFparList node)
    {
        inANonExistingFparList(node);
        outANonExistingFparList(node);
    }

    public void inAByRefFparDef(AByRefFparDef node)
    {
        defaultIn(node);
    }

    public void outAByRefFparDef(AByRefFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByRefFparDef(AByRefFparDef node)
    {
        inAByRefFparDef(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getIdList());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getPassby() != null)
        {
            node.getPassby().apply(this);
        }
        outAByRefFparDef(node);
    }

    public void inAByValFparDef(AByValFparDef node)
    {
        defaultIn(node);
    }

    public void outAByValFparDef(AByValFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByValFparDef(AByValFparDef node)
    {
        inAByValFparDef(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getIdList());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAByValFparDef(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getIdList());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVarDef(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getArrayDec() != null)
        {
            node.getArrayDec().apply(this);
        }
        outAType(node);
    }

    public void inAExistingArrayDec(AExistingArrayDec node)
    {
        defaultIn(node);
    }

    public void outAExistingArrayDec(AExistingArrayDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExistingArrayDec(AExistingArrayDec node)
    {
        inAExistingArrayDec(node);
        {
            List<TIntConst> copy = new ArrayList<TIntConst>(node.getIntConst());
            for(TIntConst e : copy)
            {
                e.apply(this);
            }
        }
        outAExistingArrayDec(node);
    }

    public void inANotExistingArrayDec(ANotExistingArrayDec node)
    {
        defaultIn(node);
    }

    public void outANotExistingArrayDec(ANotExistingArrayDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExistingArrayDec(ANotExistingArrayDec node)
    {
        inANotExistingArrayDec(node);
        outANotExistingArrayDec(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getKwChar() != null)
        {
            node.getKwChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inANothDataType(ANothDataType node)
    {
        defaultIn(node);
    }

    public void outANothDataType(ANothDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothDataType(ANothDataType node)
    {
        inANothDataType(node);
        if(node.getKwNothing() != null)
        {
            node.getKwNothing().apply(this);
        }
        outANothDataType(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getBody());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outABlockStmt(node);
    }

    public void inAFuncCallStmt(AFuncCallStmt node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStmt(AFuncCallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallStmt(AFuncCallStmt node)
    {
        inAFuncCallStmt(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inANoopStmt(ANoopStmt node)
    {
        defaultIn(node);
    }

    public void outANoopStmt(ANoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStmt(ANoopStmt node)
    {
        inANoopStmt(node);
        outANoopStmt(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASubExpr(node);
    }

    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMultExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getKwDiv() != null)
        {
            node.getKwDiv().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getKwMod() != null)
        {
            node.getKwMod().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAModExpr(node);
    }

    public void inAPosExpr(APosExpr node)
    {
        defaultIn(node);
    }

    public void outAPosExpr(APosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpr(APosExpr node)
    {
        inAPosExpr(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAPosExpr(node);
    }

    public void inANegExpr(ANegExpr node)
    {
        defaultIn(node);
    }

    public void outANegExpr(ANegExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpr(ANegExpr node)
    {
        inANegExpr(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANegExpr(node);
    }

    public void inAIntExpr(AIntExpr node)
    {
        defaultIn(node);
    }

    public void outAIntExpr(AIntExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpr(AIntExpr node)
    {
        inAIntExpr(node);
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outAIntExpr(node);
    }

    public void inACharExpr(ACharExpr node)
    {
        defaultIn(node);
    }

    public void outACharExpr(ACharExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharExpr(ACharExpr node)
    {
        inACharExpr(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharExpr(node);
    }

    public void inALvalExpr(ALvalExpr node)
    {
        defaultIn(node);
    }

    public void outALvalExpr(ALvalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalExpr(ALvalExpr node)
    {
        inALvalExpr(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        outALvalExpr(node);
    }

    public void inAFuncExpr(AFuncExpr node)
    {
        defaultIn(node);
    }

    public void outAFuncExpr(AFuncExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncExpr(AFuncExpr node)
    {
        inAFuncExpr(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncExpr(node);
    }

    public void inAStrLvalue(AStrLvalue node)
    {
        defaultIn(node);
    }

    public void outAStrLvalue(AStrLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrLvalue(AStrLvalue node)
    {
        inAStrLvalue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStrLvalue(node);
    }

    public void inAIdLvalue(AIdLvalue node)
    {
        defaultIn(node);
    }

    public void outAIdLvalue(AIdLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLvalue(AIdLvalue node)
    {
        inAIdLvalue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdLvalue(node);
    }

    public void inAArrayLvalue(AArrayLvalue node)
    {
        defaultIn(node);
    }

    public void outAArrayLvalue(AArrayLvalue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayLvalue(AArrayLvalue node)
    {
        inAArrayLvalue(node);
        if(node.getLvalue() != null)
        {
            node.getLvalue().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAArrayLvalue(node);
    }

    public void inAOrCond(AOrCond node)
    {
        defaultIn(node);
    }

    public void outAOrCond(AOrCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCond(AOrCond node)
    {
        inAOrCond(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getKwOr() != null)
        {
            node.getKwOr().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAOrCond(node);
    }

    public void inAAndCond(AAndCond node)
    {
        defaultIn(node);
    }

    public void outAAndCond(AAndCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCond(AAndCond node)
    {
        inAAndCond(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getKwAnd() != null)
        {
            node.getKwAnd().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAndCond(node);
    }

    public void inANotCond(ANotCond node)
    {
        defaultIn(node);
    }

    public void outANotCond(ANotCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCond(ANotCond node)
    {
        inANotCond(node);
        if(node.getKwNot() != null)
        {
            node.getKwNot().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outANotCond(node);
    }

    public void inAExprCmpCond(AExprCmpCond node)
    {
        defaultIn(node);
    }

    public void outAExprCmpCond(AExprCmpCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCmpCond(AExprCmpCond node)
    {
        inAExprCmpCond(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getCmpOp() != null)
        {
            node.getCmpOp().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAExprCmpCond(node);
    }

    public void inATrueCond(ATrueCond node)
    {
        defaultIn(node);
    }

    public void outATrueCond(ATrueCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueCond(ATrueCond node)
    {
        inATrueCond(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueCond(node);
    }

    public void inAFalseCond(AFalseCond node)
    {
        defaultIn(node);
    }

    public void outAFalseCond(AFalseCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseCond(AFalseCond node)
    {
        inAFalseCond(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseCond(node);
    }

    public void inAEqCmpOp(AEqCmpOp node)
    {
        defaultIn(node);
    }

    public void outAEqCmpOp(AEqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqCmpOp(AEqCmpOp node)
    {
        inAEqCmpOp(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqCmpOp(node);
    }

    public void inANeqCmpOp(ANeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outANeqCmpOp(ANeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqCmpOp(ANeqCmpOp node)
    {
        inANeqCmpOp(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqCmpOp(node);
    }

    public void inALtCmpOp(ALtCmpOp node)
    {
        defaultIn(node);
    }

    public void outALtCmpOp(ALtCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtCmpOp(ALtCmpOp node)
    {
        inALtCmpOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCmpOp(node);
    }

    public void inAGtCmpOp(AGtCmpOp node)
    {
        defaultIn(node);
    }

    public void outAGtCmpOp(AGtCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtCmpOp(AGtCmpOp node)
    {
        inAGtCmpOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCmpOp(node);
    }

    public void inAGeqCmpOp(AGeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outAGeqCmpOp(AGeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeqCmpOp(AGeqCmpOp node)
    {
        inAGeqCmpOp(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGeqCmpOp(node);
    }

    public void inALeqCmpOp(ALeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outALeqCmpOp(ALeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeqCmpOp(ALeqCmpOp node)
    {
        inALeqCmpOp(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALeqCmpOp(node);
    }
}

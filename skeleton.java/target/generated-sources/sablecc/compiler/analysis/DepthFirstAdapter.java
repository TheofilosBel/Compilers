/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        inAInnerDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAInnerDeclLocalDef(node);
    }

    public void inAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        inAInnerDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAInnerDefLocalDef(node);
    }

    public void inAInnerVarLocalDef(AInnerVarLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerVarLocalDef(AInnerVarLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerVarLocalDef(AInnerVarLocalDef node)
    {
        inAInnerVarLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAInnerVarLocalDef(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getKwFun() != null)
        {
            node.getKwFun().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFparList() != null)
        {
            node.getFparList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAHeader(node);
    }

    public void inAFparList(AFparList node)
    {
        defaultIn(node);
    }

    public void outAFparList(AFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparList(AFparList node)
    {
        inAFparList(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        {
            List<PFparListTail> copy = new ArrayList<PFparListTail>(node.getFparListTail());
            for(PFparListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAFparList(node);
    }

    public void inAFparListTail(AFparListTail node)
    {
        defaultIn(node);
    }

    public void outAFparListTail(AFparListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparListTail(AFparListTail node)
    {
        inAFparListTail(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparListTail(node);
    }

    public void inAFparDef(AFparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef(AFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef(AFparDef node)
    {
        inAFparDef(node);
        if(node.getKwRef() != null)
        {
            node.getKwRef().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outAFparDef(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getKwVar() != null)
        {
            node.getKwVar().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDef(node);
    }

    public void inAMultiIdList(AMultiIdList node)
    {
        defaultIn(node);
    }

    public void outAMultiIdList(AMultiIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiIdList(AMultiIdList node)
    {
        inAMultiIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        outAMultiIdList(node);
    }

    public void inASingleIdList(ASingleIdList node)
    {
        defaultIn(node);
    }

    public void outASingleIdList(ASingleIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleIdList(ASingleIdList node)
    {
        inASingleIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASingleIdList(node);
    }

    public void inAFparType(AFparType node)
    {
        defaultIn(node);
    }

    public void outAFparType(AFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        inAFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getEmptyArrayDeclarator() != null)
        {
            node.getEmptyArrayDeclarator().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outAFparType(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outAType(node);
    }

    public void inADataRetType(ADataRetType node)
    {
        defaultIn(node);
    }

    public void outADataRetType(ADataRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataRetType(ADataRetType node)
    {
        inADataRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADataRetType(node);
    }

    public void inANothingRetType(ANothingRetType node)
    {
        defaultIn(node);
    }

    public void outANothingRetType(ANothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getKwNothing() != null)
        {
            node.getKwNothing().apply(this);
        }
        outANothingRetType(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getKwChar() != null)
        {
            node.getKwChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inAMatchedStmt(AMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedStmt(AMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedStmt(AMatchedStmt node)
    {
        inAMatchedStmt(node);
        if(node.getMatched() != null)
        {
            node.getMatched().apply(this);
        }
        outAMatchedStmt(node);
    }

    public void inAUnmatchedStmt(AUnmatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAUnmatchedStmt(AUnmatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnmatchedStmt(AUnmatchedStmt node)
    {
        inAUnmatchedStmt(node);
        if(node.getUnmatched() != null)
        {
            node.getUnmatched().apply(this);
        }
        outAUnmatchedStmt(node);
    }

    public void inAIfMatched(AIfMatched node)
    {
        defaultIn(node);
    }

    public void outAIfMatched(AIfMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfMatched(AIfMatched node)
    {
        inAIfMatched(node);
        if(node.getMatchedIf() != null)
        {
            node.getMatchedIf().apply(this);
        }
        outAIfMatched(node);
    }

    public void inAWhileMatched(AWhileMatched node)
    {
        defaultIn(node);
    }

    public void outAWhileMatched(AWhileMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileMatched(AWhileMatched node)
    {
        inAWhileMatched(node);
        if(node.getMatchedWhile() != null)
        {
            node.getMatchedWhile().apply(this);
        }
        outAWhileMatched(node);
    }

    public void inANoopMatched(ANoopMatched node)
    {
        defaultIn(node);
    }

    public void outANoopMatched(ANoopMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopMatched(ANoopMatched node)
    {
        inANoopMatched(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopMatched(node);
    }

    public void inAAssignMatched(AAssignMatched node)
    {
        defaultIn(node);
    }

    public void outAAssignMatched(AAssignMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignMatched(AAssignMatched node)
    {
        inAAssignMatched(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignMatched(node);
    }

    public void inABlockMatched(ABlockMatched node)
    {
        defaultIn(node);
    }

    public void outABlockMatched(ABlockMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockMatched(ABlockMatched node)
    {
        inABlockMatched(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockMatched(node);
    }

    public void inAFuncCallMatched(AFuncCallMatched node)
    {
        defaultIn(node);
    }

    public void outAFuncCallMatched(AFuncCallMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallMatched(AFuncCallMatched node)
    {
        inAFuncCallMatched(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFuncCallMatched(node);
    }

    public void inAReturnMatched(AReturnMatched node)
    {
        defaultIn(node);
    }

    public void outAReturnMatched(AReturnMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnMatched(AReturnMatched node)
    {
        inAReturnMatched(node);
        if(node.getKwReturn() != null)
        {
            node.getKwReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnMatched(node);
    }

    public void inAIfUnmatched(AIfUnmatched node)
    {
        defaultIn(node);
    }

    public void outAIfUnmatched(AIfUnmatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfUnmatched(AIfUnmatched node)
    {
        inAIfUnmatched(node);
        if(node.getUnmatchedIf() != null)
        {
            node.getUnmatchedIf().apply(this);
        }
        outAIfUnmatched(node);
    }

    public void inAWhileUnmatched(AWhileUnmatched node)
    {
        defaultIn(node);
    }

    public void outAWhileUnmatched(AWhileUnmatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileUnmatched(AWhileUnmatched node)
    {
        inAWhileUnmatched(node);
        if(node.getUnmatchedWhile() != null)
        {
            node.getUnmatchedWhile().apply(this);
        }
        outAWhileUnmatched(node);
    }

    public void inAMatchedIf(AMatchedIf node)
    {
        defaultIn(node);
    }

    public void outAMatchedIf(AMatchedIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedIf(AMatchedIf node)
    {
        inAMatchedIf(node);
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getInner() != null)
        {
            node.getInner().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        if(node.getOuter() != null)
        {
            node.getOuter().apply(this);
        }
        outAMatchedIf(node);
    }

    public void inANoElseUnmatchedIf(ANoElseUnmatchedIf node)
    {
        defaultIn(node);
    }

    public void outANoElseUnmatchedIf(ANoElseUnmatchedIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseUnmatchedIf(ANoElseUnmatchedIf node)
    {
        inANoElseUnmatchedIf(node);
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outANoElseUnmatchedIf(node);
    }

    public void inAWithElseUnmatchedIf(AWithElseUnmatchedIf node)
    {
        defaultIn(node);
    }

    public void outAWithElseUnmatchedIf(AWithElseUnmatchedIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseUnmatchedIf(AWithElseUnmatchedIf node)
    {
        inAWithElseUnmatchedIf(node);
        if(node.getKwIf() != null)
        {
            node.getKwIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwThen() != null)
        {
            node.getKwThen().apply(this);
        }
        if(node.getMatched() != null)
        {
            node.getMatched().apply(this);
        }
        if(node.getKwElse() != null)
        {
            node.getKwElse().apply(this);
        }
        if(node.getUnmatched() != null)
        {
            node.getUnmatched().apply(this);
        }
        outAWithElseUnmatchedIf(node);
    }

    public void inAMatchedWhile(AMatchedWhile node)
    {
        defaultIn(node);
    }

    public void outAMatchedWhile(AMatchedWhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedWhile(AMatchedWhile node)
    {
        inAMatchedWhile(node);
        if(node.getKwWhile() != null)
        {
            node.getKwWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwDo() != null)
        {
            node.getKwDo().apply(this);
        }
        if(node.getMatched() != null)
        {
            node.getMatched().apply(this);
        }
        outAMatchedWhile(node);
    }

    public void inAUnmatchedWhile(AUnmatchedWhile node)
    {
        defaultIn(node);
    }

    public void outAUnmatchedWhile(AUnmatchedWhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnmatchedWhile(AUnmatchedWhile node)
    {
        inAUnmatchedWhile(node);
        if(node.getKwWhile() != null)
        {
            node.getKwWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwDo() != null)
        {
            node.getKwDo().apply(this);
        }
        if(node.getUnmatched() != null)
        {
            node.getUnmatched().apply(this);
        }
        outAUnmatchedWhile(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABlock(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAMultiExprList(AMultiExprList node)
    {
        defaultIn(node);
    }

    public void outAMultiExprList(AMultiExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExprList(AMultiExprList node)
    {
        inAMultiExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PExprListTail> copy = new ArrayList<PExprListTail>(node.getExprListTail());
            for(PExprListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAMultiExprList(node);
    }

    public void inAEmptyExprList(AEmptyExprList node)
    {
        defaultIn(node);
    }

    public void outAEmptyExprList(AEmptyExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExprList(AEmptyExprList node)
    {
        inAEmptyExprList(node);
        outAEmptyExprList(node);
    }

    public void inAExprListTail(AExprListTail node)
    {
        defaultIn(node);
    }

    public void outAExprListTail(AExprListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprListTail(AExprListTail node)
    {
        inAExprListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprListTail(node);
    }

    public void inAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        inAArrayDeclArrayDeclarator(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        {
            List<PArrayDeclaratorTail> copy = new ArrayList<PArrayDeclaratorTail>(node.getArrayDeclaratorTail());
            for(PArrayDeclaratorTail e : copy)
            {
                e.apply(this);
            }
        }
        outAArrayDeclArrayDeclarator(node);
    }

    public void inANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        inANoArrayDeclArrayDeclarator(node);
        outANoArrayDeclArrayDeclarator(node);
    }

    public void inAArrayDeclaratorTail(AArrayDeclaratorTail node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclaratorTail(AArrayDeclaratorTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclaratorTail(AArrayDeclaratorTail node)
    {
        inAArrayDeclaratorTail(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayDeclaratorTail(node);
    }

    public void inAEmptyArrayDeclarator(AEmptyArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAEmptyArrayDeclarator(AEmptyArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArrayDeclarator(AEmptyArrayDeclarator node)
    {
        inAEmptyArrayDeclarator(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAEmptyArrayDeclarator(node);
    }

    public void inAIdLValue(AIdLValue node)
    {
        defaultIn(node);
    }

    public void outAIdLValue(AIdLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLValue(AIdLValue node)
    {
        inAIdLValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdLValue(node);
    }

    public void inAStrLValue(AStrLValue node)
    {
        defaultIn(node);
    }

    public void outAStrLValue(AStrLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrLValue(AStrLValue node)
    {
        inAStrLValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStrLValue(node);
    }

    public void inAExprLValue(AExprLValue node)
    {
        defaultIn(node);
    }

    public void outAExprLValue(AExprLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprLValue(AExprLValue node)
    {
        inAExprLValue(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAExprLValue(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASubExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getKwDiv() != null)
        {
            node.getKwDiv().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outADivTerm(node);
    }

    public void inAModTerm(AModTerm node)
    {
        defaultIn(node);
    }

    public void outAModTerm(AModTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        inAModTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getKwMod() != null)
        {
            node.getKwMod().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outAModTerm(node);
    }

    public void inASFactorTerm(ASFactorTerm node)
    {
        defaultIn(node);
    }

    public void outASFactorTerm(ASFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASFactorTerm(ASFactorTerm node)
    {
        inASFactorTerm(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outASFactorTerm(node);
    }

    public void inAPosSignedFactor(APosSignedFactor node)
    {
        defaultIn(node);
    }

    public void outAPosSignedFactor(APosSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosSignedFactor(APosSignedFactor node)
    {
        inAPosSignedFactor(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outAPosSignedFactor(node);
    }

    public void inANegSignedFactor(ANegSignedFactor node)
    {
        defaultIn(node);
    }

    public void outANegSignedFactor(ANegSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegSignedFactor(ANegSignedFactor node)
    {
        inANegSignedFactor(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outANegSignedFactor(node);
    }

    public void inAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultIn(node);
    }

    public void outAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorSignedFactor(AFactorSignedFactor node)
    {
        inAFactorSignedFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorSignedFactor(node);
    }

    public void inAIntFactor(AIntFactor node)
    {
        defaultIn(node);
    }

    public void outAIntFactor(AIntFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntFactor(AIntFactor node)
    {
        inAIntFactor(node);
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outAIntFactor(node);
    }

    public void inACharFactor(ACharFactor node)
    {
        defaultIn(node);
    }

    public void outACharFactor(ACharFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharFactor(ACharFactor node)
    {
        inACharFactor(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharFactor(node);
    }

    public void inALvalFactor(ALvalFactor node)
    {
        defaultIn(node);
    }

    public void outALvalFactor(ALvalFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalFactor(ALvalFactor node)
    {
        inALvalFactor(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALvalFactor(node);
    }

    public void inAFuncFactor(AFuncFactor node)
    {
        defaultIn(node);
    }

    public void outAFuncFactor(AFuncFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncFactor(AFuncFactor node)
    {
        inAFuncFactor(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncFactor(node);
    }

    public void inAParensFactor(AParensFactor node)
    {
        defaultIn(node);
    }

    public void outAParensFactor(AParensFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParensFactor(AParensFactor node)
    {
        inAParensFactor(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParensFactor(node);
    }

    public void inAOrCond(AOrCond node)
    {
        defaultIn(node);
    }

    public void outAOrCond(AOrCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCond(AOrCond node)
    {
        inAOrCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwOr() != null)
        {
            node.getKwOr().apply(this);
        }
        if(node.getCond1() != null)
        {
            node.getCond1().apply(this);
        }
        outAOrCond(node);
    }

    public void inACond1Cond(ACond1Cond node)
    {
        defaultIn(node);
    }

    public void outACond1Cond(ACond1Cond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond1Cond(ACond1Cond node)
    {
        inACond1Cond(node);
        if(node.getCond1() != null)
        {
            node.getCond1().apply(this);
        }
        outACond1Cond(node);
    }

    public void inAAndCond1(AAndCond1 node)
    {
        defaultIn(node);
    }

    public void outAAndCond1(AAndCond1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCond1(AAndCond1 node)
    {
        inAAndCond1(node);
        if(node.getCond1() != null)
        {
            node.getCond1().apply(this);
        }
        if(node.getKwAnd() != null)
        {
            node.getKwAnd().apply(this);
        }
        if(node.getCond2() != null)
        {
            node.getCond2().apply(this);
        }
        outAAndCond1(node);
    }

    public void inACond2Cond1(ACond2Cond1 node)
    {
        defaultIn(node);
    }

    public void outACond2Cond1(ACond2Cond1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond2Cond1(ACond2Cond1 node)
    {
        inACond2Cond1(node);
        if(node.getCond2() != null)
        {
            node.getCond2().apply(this);
        }
        outACond2Cond1(node);
    }

    public void inANotCond2(ANotCond2 node)
    {
        defaultIn(node);
    }

    public void outANotCond2(ANotCond2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCond2(ANotCond2 node)
    {
        inANotCond2(node);
        if(node.getKwNot() != null)
        {
            node.getKwNot().apply(this);
        }
        if(node.getCond3() != null)
        {
            node.getCond3().apply(this);
        }
        outANotCond2(node);
    }

    public void inACond3Cond2(ACond3Cond2 node)
    {
        defaultIn(node);
    }

    public void outACond3Cond2(ACond3Cond2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond3Cond2(ACond3Cond2 node)
    {
        inACond3Cond2(node);
        if(node.getCond3() != null)
        {
            node.getCond3().apply(this);
        }
        outACond3Cond2(node);
    }

    public void inAExprCmpCond3(AExprCmpCond3 node)
    {
        defaultIn(node);
    }

    public void outAExprCmpCond3(AExprCmpCond3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCmpCond3(AExprCmpCond3 node)
    {
        inAExprCmpCond3(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getCmpOp() != null)
        {
            node.getCmpOp().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExprCmpCond3(node);
    }

    public void inABoolCond3(ABoolCond3 node)
    {
        defaultIn(node);
    }

    public void outABoolCond3(ABoolCond3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolCond3(ABoolCond3 node)
    {
        inABoolCond3(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolCond3(node);
    }

    public void inATrueBool(ATrueBool node)
    {
        defaultIn(node);
    }

    public void outATrueBool(ATrueBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBool(ATrueBool node)
    {
        inATrueBool(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBool(node);
    }

    public void inAFalseBool(AFalseBool node)
    {
        defaultIn(node);
    }

    public void outAFalseBool(AFalseBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBool(AFalseBool node)
    {
        inAFalseBool(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBool(node);
    }

    public void inACParensBool(ACParensBool node)
    {
        defaultIn(node);
    }

    public void outACParensBool(ACParensBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACParensBool(ACParensBool node)
    {
        inACParensBool(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACParensBool(node);
    }

    public void inAEqCmpOp(AEqCmpOp node)
    {
        defaultIn(node);
    }

    public void outAEqCmpOp(AEqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqCmpOp(AEqCmpOp node)
    {
        inAEqCmpOp(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqCmpOp(node);
    }

    public void inANeqCmpOp(ANeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outANeqCmpOp(ANeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqCmpOp(ANeqCmpOp node)
    {
        inANeqCmpOp(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqCmpOp(node);
    }

    public void inALtCmpOp(ALtCmpOp node)
    {
        defaultIn(node);
    }

    public void outALtCmpOp(ALtCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtCmpOp(ALtCmpOp node)
    {
        inALtCmpOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCmpOp(node);
    }

    public void inAGtCmpOp(AGtCmpOp node)
    {
        defaultIn(node);
    }

    public void outAGtCmpOp(AGtCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtCmpOp(AGtCmpOp node)
    {
        inAGtCmpOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCmpOp(node);
    }

    public void inALeqCmpOp(ALeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outALeqCmpOp(ALeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeqCmpOp(ALeqCmpOp node)
    {
        inALeqCmpOp(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALeqCmpOp(node);
    }

    public void inAGeqCmpOp(AGeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outAGeqCmpOp(AGeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeqCmpOp(AGeqCmpOp node)
    {
        inAGeqCmpOp(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGeqCmpOp(node);
    }
}

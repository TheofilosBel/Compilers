/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAOneProgram(AOneProgram node)
    {
        defaultIn(node);
    }

    public void outAOneProgram(AOneProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneProgram(AOneProgram node)
    {
        inAOneProgram(node);
        {
            List<PVarDef> copy = new ArrayList<PVarDef>(node.getVarDef());
            for(PVarDef e : copy)
            {
                e.apply(this);
            }
        }
        outAOneProgram(node);
    }

    public void inAVarDefVarDef(AVarDefVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefVarDef(AVarDefVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefVarDef(AVarDefVarDef node)
    {
        inAVarDefVarDef(node);
        if(node.getKwVar() != null)
        {
            node.getKwVar().apply(this);
        }
        if(node.getSetOfIds() != null)
        {
            node.getSetOfIds().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDefVarDef(node);
    }

    public void inAMultiSetSetOfIds(AMultiSetSetOfIds node)
    {
        defaultIn(node);
    }

    public void outAMultiSetSetOfIds(AMultiSetSetOfIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiSetSetOfIds(AMultiSetSetOfIds node)
    {
        inAMultiSetSetOfIds(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSetOfIds() != null)
        {
            node.getSetOfIds().apply(this);
        }
        outAMultiSetSetOfIds(node);
    }

    public void inASingleSetSetOfIds(ASingleSetSetOfIds node)
    {
        defaultIn(node);
    }

    public void outASingleSetSetOfIds(ASingleSetSetOfIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSetSetOfIds(ASingleSetSetOfIds node)
    {
        inASingleSetSetOfIds(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASingleSetSetOfIds(node);
    }

    public void inASimpleType(ASimpleType node)
    {
        defaultIn(node);
    }

    public void outASimpleType(ASimpleType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleType(ASimpleType node)
    {
        inASimpleType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outASimpleType(node);
    }

    public void inATRetRetType(ATRetRetType node)
    {
        defaultIn(node);
    }

    public void outATRetRetType(ATRetRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATRetRetType(ATRetRetType node)
    {
        inATRetRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outATRetRetType(node);
    }

    public void inARetType(ARetType node)
    {
        defaultIn(node);
    }

    public void outARetType(ARetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetType(ARetType node)
    {
        inARetType(node);
        if(node.getKwNothing() != null)
        {
            node.getKwNothing().apply(this);
        }
        outARetType(node);
    }

    public void inATIntDataType(ATIntDataType node)
    {
        defaultIn(node);
    }

    public void outATIntDataType(ATIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIntDataType(ATIntDataType node)
    {
        inATIntDataType(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outATIntDataType(node);
    }

    public void inATCharDataType(ATCharDataType node)
    {
        defaultIn(node);
    }

    public void outATCharDataType(ATCharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATCharDataType(ATCharDataType node)
    {
        inATCharDataType(node);
        if(node.getKwChar() != null)
        {
            node.getKwChar().apply(this);
        }
        outATCharDataType(node);
    }

    public void inAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        inAArrayDeclArrayDeclarator(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAArrayDeclArrayDeclarator(node);
    }

    public void inAEmptyDeclArrayDeclarator(AEmptyDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclArrayDeclarator(AEmptyDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclArrayDeclarator(AEmptyDeclArrayDeclarator node)
    {
        inAEmptyDeclArrayDeclarator(node);
        outAEmptyDeclArrayDeclarator(node);
    }
}

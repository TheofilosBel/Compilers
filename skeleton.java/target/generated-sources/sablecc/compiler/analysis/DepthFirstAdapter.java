/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inACondListProgram(ACondListProgram node)
    {
        defaultIn(node);
    }

    public void outACondListProgram(ACondListProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondListProgram(ACondListProgram node)
    {
        inACondListProgram(node);
        if(node.getCondList() != null)
        {
            node.getCondList().apply(this);
        }
        outACondListProgram(node);
    }

    public void inAMultiCondList(AMultiCondList node)
    {
        defaultIn(node);
    }

    public void outAMultiCondList(AMultiCondList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiCondList(AMultiCondList node)
    {
        inAMultiCondList(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        {
            List<PCondListTail> copy = new ArrayList<PCondListTail>(node.getCondListTail());
            for(PCondListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAMultiCondList(node);
    }

    public void inAEmptyCondList(AEmptyCondList node)
    {
        defaultIn(node);
    }

    public void outAEmptyCondList(AEmptyCondList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyCondList(AEmptyCondList node)
    {
        inAEmptyCondList(node);
        outAEmptyCondList(node);
    }

    public void inACondListTailCondListTail(ACondListTailCondListTail node)
    {
        defaultIn(node);
    }

    public void outACondListTailCondListTail(ACondListTailCondListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondListTailCondListTail(ACondListTailCondListTail node)
    {
        inACondListTailCondListTail(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outACondListTailCondListTail(node);
    }

    public void inAVarListVarDefList(AVarListVarDefList node)
    {
        defaultIn(node);
    }

    public void outAVarListVarDefList(AVarListVarDefList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarListVarDefList(AVarListVarDefList node)
    {
        inAVarListVarDefList(node);
        {
            List<PVarDef> copy = new ArrayList<PVarDef>(node.getVarDef());
            for(PVarDef e : copy)
            {
                e.apply(this);
            }
        }
        outAVarListVarDefList(node);
    }

    public void inAFuncDefFuncDef(AFuncDefFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDefFuncDef(AFuncDefFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDefFuncDef(AFuncDefFuncDef node)
    {
        inAFuncDefFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFuncDefFuncDef(node);
    }

    public void inAFuncDeclFuncDecl(AFuncDeclFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclFuncDecl(AFuncDeclFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclFuncDecl(AFuncDeclFuncDecl node)
    {
        inAFuncDeclFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFuncDeclFuncDecl(node);
    }

    public void inAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        inAInnerDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAInnerDeclLocalDef(node);
    }

    public void inAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        inAInnerDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAInnerDefLocalDef(node);
    }

    public void inAInnerVarsLocalDef(AInnerVarsLocalDef node)
    {
        defaultIn(node);
    }

    public void outAInnerVarsLocalDef(AInnerVarsLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInnerVarsLocalDef(AInnerVarsLocalDef node)
    {
        inAInnerVarsLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAInnerVarsLocalDef(node);
    }

    public void inAHeaderHeader(AHeaderHeader node)
    {
        defaultIn(node);
    }

    public void outAHeaderHeader(AHeaderHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderHeader(AHeaderHeader node)
    {
        inAHeaderHeader(node);
        if(node.getKwFun() != null)
        {
            node.getKwFun().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFparList() != null)
        {
            node.getFparList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAHeaderHeader(node);
    }

    public void inAMultiFparFparList(AMultiFparFparList node)
    {
        defaultIn(node);
    }

    public void outAMultiFparFparList(AMultiFparFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiFparFparList(AMultiFparFparList node)
    {
        inAMultiFparFparList(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFparList() != null)
        {
            node.getFparList().apply(this);
        }
        outAMultiFparFparList(node);
    }

    public void inASingleFparFparList(ASingleFparFparList node)
    {
        defaultIn(node);
    }

    public void outASingleFparFparList(ASingleFparFparList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleFparFparList(ASingleFparFparList node)
    {
        inASingleFparFparList(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outASingleFparFparList(node);
    }

    public void inAFparDefFparDef(AFparDefFparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDefFparDef(AFparDefFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDefFparDef(AFparDefFparDef node)
    {
        inAFparDefFparDef(node);
        if(node.getKwRef() != null)
        {
            node.getKwRef().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outAFparDefFparDef(node);
    }

    public void inAVarDefVarDef(AVarDefVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefVarDef(AVarDefVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefVarDef(AVarDefVarDef node)
    {
        inAVarDefVarDef(node);
        if(node.getKwVar() != null)
        {
            node.getKwVar().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDefVarDef(node);
    }

    public void inAMultiIdList(AMultiIdList node)
    {
        defaultIn(node);
    }

    public void outAMultiIdList(AMultiIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiIdList(AMultiIdList node)
    {
        inAMultiIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdList() != null)
        {
            node.getIdList().apply(this);
        }
        outAMultiIdList(node);
    }

    public void inASingleIdList(ASingleIdList node)
    {
        defaultIn(node);
    }

    public void outASingleIdList(ASingleIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleIdList(ASingleIdList node)
    {
        inASingleIdList(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outASingleIdList(node);
    }

    public void inAFparTypeFparType(AFparTypeFparType node)
    {
        defaultIn(node);
    }

    public void outAFparTypeFparType(AFparTypeFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparTypeFparType(AFparTypeFparType node)
    {
        inAFparTypeFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getEmptyArrayDeclarator() != null)
        {
            node.getEmptyArrayDeclarator().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outAFparTypeFparType(node);
    }

    public void inATypeType(ATypeType node)
    {
        defaultIn(node);
    }

    public void outATypeType(ATypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeType(ATypeType node)
    {
        inATypeType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outATypeType(node);
    }

    public void inARetDataRetType(ARetDataRetType node)
    {
        defaultIn(node);
    }

    public void outARetDataRetType(ARetDataRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetDataRetType(ARetDataRetType node)
    {
        inARetDataRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outARetDataRetType(node);
    }

    public void inARetNothRetType(ARetNothRetType node)
    {
        defaultIn(node);
    }

    public void outARetNothRetType(ARetNothRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetNothRetType(ARetNothRetType node)
    {
        inARetNothRetType(node);
        if(node.getKwNothing() != null)
        {
            node.getKwNothing().apply(this);
        }
        outARetNothRetType(node);
    }

    public void inATypeIntDataType(ATypeIntDataType node)
    {
        defaultIn(node);
    }

    public void outATypeIntDataType(ATypeIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeIntDataType(ATypeIntDataType node)
    {
        inATypeIntDataType(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outATypeIntDataType(node);
    }

    public void inATypeCharDataType(ATypeCharDataType node)
    {
        defaultIn(node);
    }

    public void outATypeCharDataType(ATypeCharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeCharDataType(ATypeCharDataType node)
    {
        inATypeCharDataType(node);
        if(node.getKwChar() != null)
        {
            node.getKwChar().apply(this);
        }
        outATypeCharDataType(node);
    }

    public void inAStmtEmptyStmt(AStmtEmptyStmt node)
    {
        defaultIn(node);
    }

    public void outAStmtEmptyStmt(AStmtEmptyStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtEmptyStmt(AStmtEmptyStmt node)
    {
        inAStmtEmptyStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStmtEmptyStmt(node);
    }

    public void inABlockBlock(ABlockBlock node)
    {
        defaultIn(node);
    }

    public void outABlockBlock(ABlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlock(ABlockBlock node)
    {
        inABlockBlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABlockBlock(node);
    }

    public void inAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        inAFuncCallFuncCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCallFuncCall(node);
    }

    public void inAMultiExprList(AMultiExprList node)
    {
        defaultIn(node);
    }

    public void outAMultiExprList(AMultiExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiExprList(AMultiExprList node)
    {
        inAMultiExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PExprListTail> copy = new ArrayList<PExprListTail>(node.getExprListTail());
            for(PExprListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAMultiExprList(node);
    }

    public void inAEmptyExprList(AEmptyExprList node)
    {
        defaultIn(node);
    }

    public void outAEmptyExprList(AEmptyExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExprList(AEmptyExprList node)
    {
        inAEmptyExprList(node);
        outAEmptyExprList(node);
    }

    public void inAExprListTailExprListTail(AExprListTailExprListTail node)
    {
        defaultIn(node);
    }

    public void outAExprListTailExprListTail(AExprListTailExprListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprListTailExprListTail(AExprListTailExprListTail node)
    {
        inAExprListTailExprListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprListTailExprListTail(node);
    }

    public void inAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        inAArrayDeclArrayDeclarator(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        {
            List<PArrayDeclaratorTail> copy = new ArrayList<PArrayDeclaratorTail>(node.getArrayDeclaratorTail());
            for(PArrayDeclaratorTail e : copy)
            {
                e.apply(this);
            }
        }
        outAArrayDeclArrayDeclarator(node);
    }

    public void inANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        inANoArrayDeclArrayDeclarator(node);
        outANoArrayDeclArrayDeclarator(node);
    }

    public void inAMultipleArrayDeclaratorTail(AMultipleArrayDeclaratorTail node)
    {
        defaultIn(node);
    }

    public void outAMultipleArrayDeclaratorTail(AMultipleArrayDeclaratorTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleArrayDeclaratorTail(AMultipleArrayDeclaratorTail node)
    {
        inAMultipleArrayDeclaratorTail(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAMultipleArrayDeclaratorTail(node);
    }

    public void inAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArrayDeclEmptyArrayDeclarator(AEmptyArrayDeclEmptyArrayDeclarator node)
    {
        inAEmptyArrayDeclEmptyArrayDeclarator(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAEmptyArrayDeclEmptyArrayDeclarator(node);
    }

    public void inALvalIdLValue(ALvalIdLValue node)
    {
        defaultIn(node);
    }

    public void outALvalIdLValue(ALvalIdLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalIdLValue(ALvalIdLValue node)
    {
        inALvalIdLValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALvalIdLValue(node);
    }

    public void inALvalStrLValue(ALvalStrLValue node)
    {
        defaultIn(node);
    }

    public void outALvalStrLValue(ALvalStrLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalStrLValue(ALvalStrLValue node)
    {
        inALvalStrLValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outALvalStrLValue(node);
    }

    public void inALvalExprLValue(ALvalExprLValue node)
    {
        defaultIn(node);
    }

    public void outALvalExprLValue(ALvalExprLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALvalExprLValue(ALvalExprLValue node)
    {
        inALvalExprLValue(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outALvalExprLValue(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASubExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getKwDiv() != null)
        {
            node.getKwDiv().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outADivTerm(node);
    }

    public void inAModTerm(AModTerm node)
    {
        defaultIn(node);
    }

    public void outAModTerm(AModTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        inAModTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getKwMod() != null)
        {
            node.getKwMod().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outAModTerm(node);
    }

    public void inASFactorTerm(ASFactorTerm node)
    {
        defaultIn(node);
    }

    public void outASFactorTerm(ASFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASFactorTerm(ASFactorTerm node)
    {
        inASFactorTerm(node);
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outASFactorTerm(node);
    }

    public void inAPosSignedFactor(APosSignedFactor node)
    {
        defaultIn(node);
    }

    public void outAPosSignedFactor(APosSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosSignedFactor(APosSignedFactor node)
    {
        inAPosSignedFactor(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outAPosSignedFactor(node);
    }

    public void inANegSignedFactor(ANegSignedFactor node)
    {
        defaultIn(node);
    }

    public void outANegSignedFactor(ANegSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegSignedFactor(ANegSignedFactor node)
    {
        inANegSignedFactor(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSignedFactor() != null)
        {
            node.getSignedFactor().apply(this);
        }
        outANegSignedFactor(node);
    }

    public void inAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultIn(node);
    }

    public void outAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorSignedFactor(AFactorSignedFactor node)
    {
        inAFactorSignedFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorSignedFactor(node);
    }

    public void inAFIntFactor(AFIntFactor node)
    {
        defaultIn(node);
    }

    public void outAFIntFactor(AFIntFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFIntFactor(AFIntFactor node)
    {
        inAFIntFactor(node);
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outAFIntFactor(node);
    }

    public void inAFCharFactor(AFCharFactor node)
    {
        defaultIn(node);
    }

    public void outAFCharFactor(AFCharFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFCharFactor(AFCharFactor node)
    {
        inAFCharFactor(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outAFCharFactor(node);
    }

    public void inAFLvalFactor(AFLvalFactor node)
    {
        defaultIn(node);
    }

    public void outAFLvalFactor(AFLvalFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFLvalFactor(AFLvalFactor node)
    {
        inAFLvalFactor(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outAFLvalFactor(node);
    }

    public void inAFFuncFactor(AFFuncFactor node)
    {
        defaultIn(node);
    }

    public void outAFFuncFactor(AFFuncFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFFuncFactor(AFFuncFactor node)
    {
        inAFFuncFactor(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFFuncFactor(node);
    }

    public void inAFParensFactor(AFParensFactor node)
    {
        defaultIn(node);
    }

    public void outAFParensFactor(AFParensFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFParensFactor(AFParensFactor node)
    {
        inAFParensFactor(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFParensFactor(node);
    }

    public void inAOrCond(AOrCond node)
    {
        defaultIn(node);
    }

    public void outAOrCond(AOrCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCond(AOrCond node)
    {
        inAOrCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getKwOr() != null)
        {
            node.getKwOr().apply(this);
        }
        if(node.getCond1() != null)
        {
            node.getCond1().apply(this);
        }
        outAOrCond(node);
    }

    public void inACond1Cond(ACond1Cond node)
    {
        defaultIn(node);
    }

    public void outACond1Cond(ACond1Cond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond1Cond(ACond1Cond node)
    {
        inACond1Cond(node);
        if(node.getCond1() != null)
        {
            node.getCond1().apply(this);
        }
        outACond1Cond(node);
    }

    public void inAAndCond1(AAndCond1 node)
    {
        defaultIn(node);
    }

    public void outAAndCond1(AAndCond1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCond1(AAndCond1 node)
    {
        inAAndCond1(node);
        if(node.getCond1() != null)
        {
            node.getCond1().apply(this);
        }
        if(node.getKwAnd() != null)
        {
            node.getKwAnd().apply(this);
        }
        if(node.getCond2() != null)
        {
            node.getCond2().apply(this);
        }
        outAAndCond1(node);
    }

    public void inACond2Cond1(ACond2Cond1 node)
    {
        defaultIn(node);
    }

    public void outACond2Cond1(ACond2Cond1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond2Cond1(ACond2Cond1 node)
    {
        inACond2Cond1(node);
        if(node.getCond2() != null)
        {
            node.getCond2().apply(this);
        }
        outACond2Cond1(node);
    }

    public void inANotCond2(ANotCond2 node)
    {
        defaultIn(node);
    }

    public void outANotCond2(ANotCond2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCond2(ANotCond2 node)
    {
        inANotCond2(node);
        if(node.getKwNot() != null)
        {
            node.getKwNot().apply(this);
        }
        if(node.getCond3() != null)
        {
            node.getCond3().apply(this);
        }
        outANotCond2(node);
    }

    public void inACond3Cond2(ACond3Cond2 node)
    {
        defaultIn(node);
    }

    public void outACond3Cond2(ACond3Cond2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond3Cond2(ACond3Cond2 node)
    {
        inACond3Cond2(node);
        if(node.getCond3() != null)
        {
            node.getCond3().apply(this);
        }
        outACond3Cond2(node);
    }

    public void inAExprCmpCond3(AExprCmpCond3 node)
    {
        defaultIn(node);
    }

    public void outAExprCmpCond3(AExprCmpCond3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCmpCond3(AExprCmpCond3 node)
    {
        inAExprCmpCond3(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getCmpOp() != null)
        {
            node.getCmpOp().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAExprCmpCond3(node);
    }

    public void inABoolCond3(ABoolCond3 node)
    {
        defaultIn(node);
    }

    public void outABoolCond3(ABoolCond3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolCond3(ABoolCond3 node)
    {
        inABoolCond3(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolCond3(node);
    }

    public void inATrueBool(ATrueBool node)
    {
        defaultIn(node);
    }

    public void outATrueBool(ATrueBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBool(ATrueBool node)
    {
        inATrueBool(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBool(node);
    }

    public void inAFalseBool(AFalseBool node)
    {
        defaultIn(node);
    }

    public void outAFalseBool(AFalseBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBool(AFalseBool node)
    {
        inAFalseBool(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBool(node);
    }

    public void inACParensBool(ACParensBool node)
    {
        defaultIn(node);
    }

    public void outACParensBool(ACParensBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACParensBool(ACParensBool node)
    {
        inACParensBool(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACParensBool(node);
    }

    public void inAEqCmpOp(AEqCmpOp node)
    {
        defaultIn(node);
    }

    public void outAEqCmpOp(AEqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqCmpOp(AEqCmpOp node)
    {
        inAEqCmpOp(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqCmpOp(node);
    }

    public void inANeqCmpOp(ANeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outANeqCmpOp(ANeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqCmpOp(ANeqCmpOp node)
    {
        inANeqCmpOp(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqCmpOp(node);
    }

    public void inALtCmpOp(ALtCmpOp node)
    {
        defaultIn(node);
    }

    public void outALtCmpOp(ALtCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtCmpOp(ALtCmpOp node)
    {
        inALtCmpOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtCmpOp(node);
    }

    public void inAGtCmpOp(AGtCmpOp node)
    {
        defaultIn(node);
    }

    public void outAGtCmpOp(AGtCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtCmpOp(AGtCmpOp node)
    {
        inAGtCmpOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtCmpOp(node);
    }

    public void inALeqCmpOp(ALeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outALeqCmpOp(ALeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeqCmpOp(ALeqCmpOp node)
    {
        inALeqCmpOp(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALeqCmpOp(node);
    }

    public void inAGeqCmpOp(AGeqCmpOp node)
    {
        defaultIn(node);
    }

    public void outAGeqCmpOp(AGeqCmpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeqCmpOp(AGeqCmpOp node)
    {
        inAGeqCmpOp(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGeqCmpOp(node);
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAOneProgram(AOneProgram node)
    {
        defaultIn(node);
    }

    public void outAOneProgram(AOneProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneProgram(AOneProgram node)
    {
        inAOneProgram(node);
        {
            List<PVariableDefinition> copy = new ArrayList<PVariableDefinition>(node.getVariableDefinition());
            for(PVariableDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outAOneProgram(node);
    }

    public void inADefVariableDefinition(ADefVariableDefinition node)
    {
        defaultIn(node);
    }

    public void outADefVariableDefinition(ADefVariableDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefVariableDefinition(ADefVariableDefinition node)
    {
        inADefVariableDefinition(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getSetOfVariables() != null)
        {
            node.getSetOfVariables().apply(this);
        }
        if(node.getDeftype() != null)
        {
            node.getDeftype().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getCmdEnd() != null)
        {
            node.getCmdEnd().apply(this);
        }
        outADefVariableDefinition(node);
<<<<<<< HEAD
    }

    public void inAMultiSetSetOfVariables(AMultiSetSetOfVariables node)
    {
        defaultIn(node);
    }

    public void outAMultiSetSetOfVariables(AMultiSetSetOfVariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiSetSetOfVariables(AMultiSetSetOfVariables node)
    {
        inAMultiSetSetOfVariables(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSetOfVariables() != null)
        {
            node.getSetOfVariables().apply(this);
        }
        outAMultiSetSetOfVariables(node);
    }

    public void inASingleSetSetOfVariables(ASingleSetSetOfVariables node)
    {
        defaultIn(node);
    }

    public void outASingleSetSetOfVariables(ASingleSetSetOfVariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSetSetOfVariables(ASingleSetSetOfVariables node)
    {
        inASingleSetSetOfVariables(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outASingleSetSetOfVariables(node);
    }

    public void inASimpleType(ASimpleType node)
=======
    }

    public void inAMultiSetSetOfVariables(AMultiSetSetOfVariables node)
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    {
        defaultIn(node);
    }

<<<<<<< HEAD
    public void outASimpleType(ASimpleType node)
=======
    public void outAMultiSetSetOfVariables(AMultiSetSetOfVariables node)
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    {
        defaultOut(node);
    }

    @Override
<<<<<<< HEAD
    public void caseASimpleType(ASimpleType node)
    {
        inASimpleType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outASimpleType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getArrayDeclaration() != null)
        {
            node.getArrayDeclaration().apply(this);
        }
        outAArrayType(node);
    }

    public void inATIntDataType(ATIntDataType node)
=======
    public void caseAMultiSetSetOfVariables(AMultiSetSetOfVariables node)
    {
        inAMultiSetSetOfVariables(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSetOfVariables() != null)
        {
            node.getSetOfVariables().apply(this);
        }
        outAMultiSetSetOfVariables(node);
    }

    public void inASingleSetSetOfVariables(ASingleSetSetOfVariables node)
    {
        defaultIn(node);
    }

    public void outASingleSetSetOfVariables(ASingleSetSetOfVariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleSetSetOfVariables(ASingleSetSetOfVariables node)
    {
        inASingleSetSetOfVariables(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outASingleSetSetOfVariables(node);
    }

    public void inATIntType(ATIntType node)
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    {
        defaultIn(node);
    }

<<<<<<< HEAD
    public void outATIntDataType(ATIntDataType node)
=======
    public void outATIntType(ATIntType node)
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    {
        defaultOut(node);
    }

    @Override
<<<<<<< HEAD
    public void caseATIntDataType(ATIntDataType node)
    {
        inATIntDataType(node);
=======
    public void caseATIntType(ATIntType node)
    {
        inATIntType(node);
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
<<<<<<< HEAD
        outATIntDataType(node);
    }

    public void inATCharDataType(ATCharDataType node)
=======
        outATIntType(node);
    }

    public void inATCharType(ATCharType node)
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    {
        defaultIn(node);
    }

<<<<<<< HEAD
    public void outATCharDataType(ATCharDataType node)
=======
    public void outATCharType(ATCharType node)
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    {
        defaultOut(node);
    }

    @Override
<<<<<<< HEAD
    public void caseATCharDataType(ATCharDataType node)
    {
        inATCharDataType(node);
=======
    public void caseATCharType(ATCharType node)
    {
        inATCharType(node);
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
<<<<<<< HEAD
        outATCharDataType(node);
=======
        outATCharType(node);
>>>>>>> b1eaafba594df57a3dd041af00bbd79c5d592cdd
    }
}

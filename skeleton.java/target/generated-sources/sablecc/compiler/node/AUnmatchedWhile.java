/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AUnmatchedWhile extends PUnmatchedWhile
{
    private TKwWhile _kwWhile_;
    private PCond _cond_;
    private TKwDo _kwDo_;
    private PUnmatched _unmatched_;

    public AUnmatchedWhile()
    {
        // Constructor
    }

    public AUnmatchedWhile(
        @SuppressWarnings("hiding") TKwWhile _kwWhile_,
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") TKwDo _kwDo_,
        @SuppressWarnings("hiding") PUnmatched _unmatched_)
    {
        // Constructor
        setKwWhile(_kwWhile_);

        setCond(_cond_);

        setKwDo(_kwDo_);

        setUnmatched(_unmatched_);

    }

    @Override
    public Object clone()
    {
        return new AUnmatchedWhile(
            cloneNode(this._kwWhile_),
            cloneNode(this._cond_),
            cloneNode(this._kwDo_),
            cloneNode(this._unmatched_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnmatchedWhile(this);
    }

    public TKwWhile getKwWhile()
    {
        return this._kwWhile_;
    }

    public void setKwWhile(TKwWhile node)
    {
        if(this._kwWhile_ != null)
        {
            this._kwWhile_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwWhile_ = node;
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TKwDo getKwDo()
    {
        return this._kwDo_;
    }

    public void setKwDo(TKwDo node)
    {
        if(this._kwDo_ != null)
        {
            this._kwDo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwDo_ = node;
    }

    public PUnmatched getUnmatched()
    {
        return this._unmatched_;
    }

    public void setUnmatched(PUnmatched node)
    {
        if(this._unmatched_ != null)
        {
            this._unmatched_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unmatched_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwWhile_)
            + toString(this._cond_)
            + toString(this._kwDo_)
            + toString(this._unmatched_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwWhile_ == child)
        {
            this._kwWhile_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._kwDo_ == child)
        {
            this._kwDo_ = null;
            return;
        }

        if(this._unmatched_ == child)
        {
            this._unmatched_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwWhile_ == oldChild)
        {
            setKwWhile((TKwWhile) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        if(this._kwDo_ == oldChild)
        {
            setKwDo((TKwDo) newChild);
            return;
        }

        if(this._unmatched_ == oldChild)
        {
            setUnmatched((PUnmatched) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

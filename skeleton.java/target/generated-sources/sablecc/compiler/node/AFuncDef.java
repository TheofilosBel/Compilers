/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFuncDef extends PFuncDef
{
    private TId _id_;
    private PFparList _fplist_;
    private PDataType _retType_;
    private PLocalDefList _localDefs_;
    private PStmt _block_;

    public AFuncDef()
    {
        // Constructor
    }

    public AFuncDef(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PFparList _fplist_,
        @SuppressWarnings("hiding") PDataType _retType_,
        @SuppressWarnings("hiding") PLocalDefList _localDefs_,
        @SuppressWarnings("hiding") PStmt _block_)
    {
        // Constructor
        setId(_id_);

        setFplist(_fplist_);

        setRetType(_retType_);

        setLocalDefs(_localDefs_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AFuncDef(
            cloneNode(this._id_),
            cloneNode(this._fplist_),
            cloneNode(this._retType_),
            cloneNode(this._localDefs_),
            cloneNode(this._block_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncDef(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PFparList getFplist()
    {
        return this._fplist_;
    }

    public void setFplist(PFparList node)
    {
        if(this._fplist_ != null)
        {
            this._fplist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fplist_ = node;
    }

    public PDataType getRetType()
    {
        return this._retType_;
    }

    public void setRetType(PDataType node)
    {
        if(this._retType_ != null)
        {
            this._retType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._retType_ = node;
    }

    public PLocalDefList getLocalDefs()
    {
        return this._localDefs_;
    }

    public void setLocalDefs(PLocalDefList node)
    {
        if(this._localDefs_ != null)
        {
            this._localDefs_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._localDefs_ = node;
    }

    public PStmt getBlock()
    {
        return this._block_;
    }

    public void setBlock(PStmt node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._fplist_)
            + toString(this._retType_)
            + toString(this._localDefs_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._fplist_ == child)
        {
            this._fplist_ = null;
            return;
        }

        if(this._retType_ == child)
        {
            this._retType_ = null;
            return;
        }

        if(this._localDefs_ == child)
        {
            this._localDefs_ = null;
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._fplist_ == oldChild)
        {
            setFplist((PFparList) newChild);
            return;
        }

        if(this._retType_ == oldChild)
        {
            setRetType((PDataType) newChild);
            return;
        }

        if(this._localDefs_ == oldChild)
        {
            setLocalDefs((PLocalDefList) newChild);
            return;
        }

        if(this._block_ == oldChild)
        {
            setBlock((PStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AMultiCondList extends PCondList
{
    private PCond _cond_;
    private final LinkedList<PCondListTail> _condListTail_ = new LinkedList<PCondListTail>();

    public AMultiCondList()
    {
        // Constructor
    }

    public AMultiCondList(
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") List<PCondListTail> _condListTail_)
    {
        // Constructor
        setCond(_cond_);

        setCondListTail(_condListTail_);

    }

    @Override
    public Object clone()
    {
        return new AMultiCondList(
            cloneNode(this._cond_),
            cloneList(this._condListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiCondList(this);
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public LinkedList<PCondListTail> getCondListTail()
    {
        return this._condListTail_;
    }

    public void setCondListTail(List<PCondListTail> list)
    {
        this._condListTail_.clear();
        this._condListTail_.addAll(list);
        for(PCondListTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cond_)
            + toString(this._condListTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._condListTail_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        for(ListIterator<PCondListTail> i = this._condListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCondListTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

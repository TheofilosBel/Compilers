/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AExistingFparList extends PFparList
{
    private final LinkedList<PFparDef> _args_ = new LinkedList<PFparDef>();

    public AExistingFparList()
    {
        // Constructor
    }

    public AExistingFparList(
        @SuppressWarnings("hiding") List<PFparDef> _args_)
    {
        // Constructor
        setArgs(_args_);

    }

    @Override
    public Object clone()
    {
        return new AExistingFparList(
            cloneList(this._args_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExistingFparList(this);
    }

    public LinkedList<PFparDef> getArgs()
    {
        return this._args_;
    }

    public void setArgs(List<PFparDef> list)
    {
        this._args_.clear();
        this._args_.addAll(list);
        for(PFparDef e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._args_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._args_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PFparDef> i = this._args_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFparDef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AFuncDecl */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AInnerDeclLocalDef */
		    {
			ArrayList list = new4();
			push(goTo(3), list);
		    }
		    break;
                    case 5: /* reduce AInnerDefLocalDef */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AInnerVarLocalDef */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AAheader1Header */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AAheader2Header */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AAfparlist1FparList */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AAfparlist2FparList */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AFparListTail */
		    {
			ArrayList list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce AAfpardef1FparDef */
		    {
			ArrayList list = new12();
			push(goTo(7), list);
		    }
		    break;
                    case 13: /* reduce AAfpardef2FparDef */
		    {
			ArrayList list = new13();
			push(goTo(7), list);
		    }
		    break;
                    case 14: /* reduce AVarDef */
		    {
			ArrayList list = new14();
			push(goTo(8), list);
		    }
		    break;
                    case 15: /* reduce AMultiIdList */
		    {
			ArrayList list = new15();
			push(goTo(9), list);
		    }
		    break;
                    case 16: /* reduce ASingleIdList */
		    {
			ArrayList list = new16();
			push(goTo(9), list);
		    }
		    break;
                    case 17: /* reduce AAfpartype1FparType */
		    {
			ArrayList list = new17();
			push(goTo(10), list);
		    }
		    break;
                    case 18: /* reduce AAfpartype2FparType */
		    {
			ArrayList list = new18();
			push(goTo(10), list);
		    }
		    break;
                    case 19: /* reduce AType */
		    {
			ArrayList list = new19();
			push(goTo(11), list);
		    }
		    break;
                    case 20: /* reduce ADataRetType */
		    {
			ArrayList list = new20();
			push(goTo(12), list);
		    }
		    break;
                    case 21: /* reduce ANothingRetType */
		    {
			ArrayList list = new21();
			push(goTo(12), list);
		    }
		    break;
                    case 22: /* reduce AIntDataType */
		    {
			ArrayList list = new22();
			push(goTo(13), list);
		    }
		    break;
                    case 23: /* reduce ACharDataType */
		    {
			ArrayList list = new23();
			push(goTo(13), list);
		    }
		    break;
                    case 24: /* reduce AMatchedStmt */
		    {
			ArrayList list = new24();
			push(goTo(14), list);
		    }
		    break;
                    case 25: /* reduce AUnmatchedStmt */
		    {
			ArrayList list = new25();
			push(goTo(14), list);
		    }
		    break;
                    case 26: /* reduce AIfMatched */
		    {
			ArrayList list = new26();
			push(goTo(15), list);
		    }
		    break;
                    case 27: /* reduce AWhileMatched */
		    {
			ArrayList list = new27();
			push(goTo(15), list);
		    }
		    break;
                    case 28: /* reduce ANoopMatched */
		    {
			ArrayList list = new28();
			push(goTo(15), list);
		    }
		    break;
                    case 29: /* reduce AAssignMatched */
		    {
			ArrayList list = new29();
			push(goTo(15), list);
		    }
		    break;
                    case 30: /* reduce ABlockMatched */
		    {
			ArrayList list = new30();
			push(goTo(15), list);
		    }
		    break;
                    case 31: /* reduce AFuncCallMatched */
		    {
			ArrayList list = new31();
			push(goTo(15), list);
		    }
		    break;
                    case 32: /* reduce AAreturnmatched1Matched */
		    {
			ArrayList list = new32();
			push(goTo(15), list);
		    }
		    break;
                    case 33: /* reduce AAreturnmatched2Matched */
		    {
			ArrayList list = new33();
			push(goTo(15), list);
		    }
		    break;
                    case 34: /* reduce AIfUnmatched */
		    {
			ArrayList list = new34();
			push(goTo(16), list);
		    }
		    break;
                    case 35: /* reduce AWhileUnmatched */
		    {
			ArrayList list = new35();
			push(goTo(16), list);
		    }
		    break;
                    case 36: /* reduce AMatchedIf */
		    {
			ArrayList list = new36();
			push(goTo(17), list);
		    }
		    break;
                    case 37: /* reduce ANoElseUnmatchedIf */
		    {
			ArrayList list = new37();
			push(goTo(18), list);
		    }
		    break;
                    case 38: /* reduce AWithElseUnmatchedIf */
		    {
			ArrayList list = new38();
			push(goTo(18), list);
		    }
		    break;
                    case 39: /* reduce AMatchedWhile */
		    {
			ArrayList list = new39();
			push(goTo(19), list);
		    }
		    break;
                    case 40: /* reduce AUnmatchedWhile */
		    {
			ArrayList list = new40();
			push(goTo(20), list);
		    }
		    break;
                    case 41: /* reduce AAblock1Block */
		    {
			ArrayList list = new41();
			push(goTo(21), list);
		    }
		    break;
                    case 42: /* reduce AAblock2Block */
		    {
			ArrayList list = new42();
			push(goTo(21), list);
		    }
		    break;
                    case 43: /* reduce AAfunccall2$Amultiexprlist11FuncCall */
		    {
			ArrayList list = new43();
			push(goTo(22), list);
		    }
		    break;
                    case 44: /* reduce AAfunccall2$Amultiexprlist21FuncCall */
		    {
			ArrayList list = new44();
			push(goTo(22), list);
		    }
		    break;
                    case 45: /* reduce AAfunccall2$Empty1FuncCall */
		    {
			ArrayList list = new45();
			push(goTo(22), list);
		    }
		    break;
                    case 46: /* reduce AExprListTail */
		    {
			ArrayList list = new46();
			push(goTo(23), list);
		    }
		    break;
                    case 47: /* reduce AAarraydeclarraydeclarator1ArrayDeclarator */
		    {
			ArrayList list = new47();
			push(goTo(24), list);
		    }
		    break;
                    case 48: /* reduce AAarraydeclarraydeclarator2ArrayDeclarator */
		    {
			ArrayList list = new48();
			push(goTo(24), list);
		    }
		    break;
                    case 49: /* reduce ANoArrayDeclArrayDeclarator */
		    {
			ArrayList list = new49();
			push(goTo(24), list);
		    }
		    break;
                    case 50: /* reduce AArrayDeclaratorTail */
		    {
			ArrayList list = new50();
			push(goTo(25), list);
		    }
		    break;
                    case 51: /* reduce AEmptyArrayDeclarator */
		    {
			ArrayList list = new51();
			push(goTo(26), list);
		    }
		    break;
                    case 52: /* reduce AIdLValue */
		    {
			ArrayList list = new52();
			push(goTo(27), list);
		    }
		    break;
                    case 53: /* reduce AStrLValue */
		    {
			ArrayList list = new53();
			push(goTo(27), list);
		    }
		    break;
                    case 54: /* reduce AExprLValue */
		    {
			ArrayList list = new54();
			push(goTo(27), list);
		    }
		    break;
                    case 55: /* reduce AAddExpr */
		    {
			ArrayList list = new55();
			push(goTo(28), list);
		    }
		    break;
                    case 56: /* reduce ASubExpr */
		    {
			ArrayList list = new56();
			push(goTo(28), list);
		    }
		    break;
                    case 57: /* reduce ATermExpr */
		    {
			ArrayList list = new57();
			push(goTo(28), list);
		    }
		    break;
                    case 58: /* reduce AMultTerm */
		    {
			ArrayList list = new58();
			push(goTo(29), list);
		    }
		    break;
                    case 59: /* reduce ADivTerm */
		    {
			ArrayList list = new59();
			push(goTo(29), list);
		    }
		    break;
                    case 60: /* reduce AModTerm */
		    {
			ArrayList list = new60();
			push(goTo(29), list);
		    }
		    break;
                    case 61: /* reduce ASFactorTerm */
		    {
			ArrayList list = new61();
			push(goTo(29), list);
		    }
		    break;
                    case 62: /* reduce APosSignedFactor */
		    {
			ArrayList list = new62();
			push(goTo(30), list);
		    }
		    break;
                    case 63: /* reduce ANegSignedFactor */
		    {
			ArrayList list = new63();
			push(goTo(30), list);
		    }
		    break;
                    case 64: /* reduce AFactorSignedFactor */
		    {
			ArrayList list = new64();
			push(goTo(30), list);
		    }
		    break;
                    case 65: /* reduce AIntFactor */
		    {
			ArrayList list = new65();
			push(goTo(31), list);
		    }
		    break;
                    case 66: /* reduce ACharFactor */
		    {
			ArrayList list = new66();
			push(goTo(31), list);
		    }
		    break;
                    case 67: /* reduce ALvalFactor */
		    {
			ArrayList list = new67();
			push(goTo(31), list);
		    }
		    break;
                    case 68: /* reduce AFuncFactor */
		    {
			ArrayList list = new68();
			push(goTo(31), list);
		    }
		    break;
                    case 69: /* reduce AParensFactor */
		    {
			ArrayList list = new69();
			push(goTo(31), list);
		    }
		    break;
                    case 70: /* reduce AOrCond */
		    {
			ArrayList list = new70();
			push(goTo(32), list);
		    }
		    break;
                    case 71: /* reduce ACond1Cond */
		    {
			ArrayList list = new71();
			push(goTo(32), list);
		    }
		    break;
                    case 72: /* reduce AAndCond1 */
		    {
			ArrayList list = new72();
			push(goTo(33), list);
		    }
		    break;
                    case 73: /* reduce ACond2Cond1 */
		    {
			ArrayList list = new73();
			push(goTo(33), list);
		    }
		    break;
                    case 74: /* reduce ANotCond2 */
		    {
			ArrayList list = new74();
			push(goTo(34), list);
		    }
		    break;
                    case 75: /* reduce ACond3Cond2 */
		    {
			ArrayList list = new75();
			push(goTo(34), list);
		    }
		    break;
                    case 76: /* reduce AExprCmpCond3 */
		    {
			ArrayList list = new76();
			push(goTo(35), list);
		    }
		    break;
                    case 77: /* reduce ABoolCond3 */
		    {
			ArrayList list = new77();
			push(goTo(35), list);
		    }
		    break;
                    case 78: /* reduce ATrueBool */
		    {
			ArrayList list = new78();
			push(goTo(36), list);
		    }
		    break;
                    case 79: /* reduce AFalseBool */
		    {
			ArrayList list = new79();
			push(goTo(36), list);
		    }
		    break;
                    case 80: /* reduce ACParensBool */
		    {
			ArrayList list = new80();
			push(goTo(36), list);
		    }
		    break;
                    case 81: /* reduce AEqCmpOp */
		    {
			ArrayList list = new81();
			push(goTo(37), list);
		    }
		    break;
                    case 82: /* reduce ANeqCmpOp */
		    {
			ArrayList list = new82();
			push(goTo(37), list);
		    }
		    break;
                    case 83: /* reduce ALtCmpOp */
		    {
			ArrayList list = new83();
			push(goTo(37), list);
		    }
		    break;
                    case 84: /* reduce AGtCmpOp */
		    {
			ArrayList list = new84();
			push(goTo(37), list);
		    }
		    break;
                    case 85: /* reduce ALeqCmpOp */
		    {
			ArrayList list = new85();
			push(goTo(37), list);
		    }
		    break;
                    case 86: /* reduce AGeqCmpOp */
		    {
			ArrayList list = new86();
			push(goTo(37), list);
		    }
		    break;
                    case 87: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new87();
			push(goTo(38), list);
		    }
		    break;
                    case 88: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new88();
			push(goTo(38), list);
		    }
		    break;
                    case 89: /* reduce ATerminal$FparListTail */
		    {
			ArrayList list = new89();
			push(goTo(39), list);
		    }
		    break;
                    case 90: /* reduce ANonTerminal$FparListTail */
		    {
			ArrayList list = new90();
			push(goTo(39), list);
		    }
		    break;
                    case 91: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new91();
			push(goTo(40), list);
		    }
		    break;
                    case 92: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new92();
			push(goTo(40), list);
		    }
		    break;
                    case 93: /* reduce ATerminal$ExprListTail */
		    {
			ArrayList list = new93();
			push(goTo(41), list);
		    }
		    break;
                    case 94: /* reduce ANonTerminal$ExprListTail */
		    {
			ArrayList list = new94();
			push(goTo(41), list);
		    }
		    break;
                    case 95: /* reduce ATerminal$ArrayDeclaratorTail */
		    {
			ArrayList list = new95();
			push(goTo(42), list);
		    }
		    break;
                    case 96: /* reduce ANonTerminal$ArrayDeclaratorTail */
		    {
			ArrayList list = new96();
			push(goTo(42), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemicolon tsemicolonNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tsemicolonNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AInnerDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AInnerDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AInnerDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AInnerDefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AInnerVarLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AInnerVarLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKwFun tkwfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tkwfunNode2 = (TKwFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        prettypeNode8 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tkwfunNode2, tidNode3, tlparNode4, null, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKwFun tkwfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PFparList pfparlistNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tkwfunNode2 = (TKwFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pfparlistNode5 = (PFparList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        prettypeNode8 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tkwfunNode2, tidNode3, tlparNode4, pfparlistNode5, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAfparlist1FparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparList pfparlistNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode3 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        }

        pfparlistNode1 = new AFparList(pfpardefNode2, listNode3);
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAfparlist2FparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparList pfparlistNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode4 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfparlistNode1 = new AFparList(pfpardefNode2, listNode4);
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AFparListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparListTail pfparlisttailNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PFparDef pfpardefNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList2.get(0);

        pfparlisttailNode1 = new AFparListTail(tsemicolonNode2, pfpardefNode3);
        }
	nodeList.add(pfparlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PFparType pfpartypeNode5;
        pidlistNode3 = (PIdList)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        pfpartypeNode5 = (PFparType)nodeArrayList3.get(0);

        pfpardefNode1 = new AFparDef(null, pidlistNode3, tcolonNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TKwRef tkwrefNode2;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PFparType pfpartypeNode5;
        tkwrefNode2 = (TKwRef)nodeArrayList1.get(0);
        pidlistNode3 = (PIdList)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode5 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(tkwrefNode2, pidlistNode3, tcolonNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AVarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TKwVar tkwvarNode2;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tkwvarNode2 = (TKwVar)nodeArrayList1.get(0);
        pidlistNode3 = (PIdList)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef(tkwvarNode2, pidlistNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMultiIdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdList pidlistNode1;
        {
            // Block
        TId tidNode2;
        TComma tcommaNode3;
        PIdList pidlistNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pidlistNode4 = (PIdList)nodeArrayList3.get(0);

        pidlistNode1 = new AMultiIdList(tidNode2, tcommaNode3, pidlistNode4);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ASingleIdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdList pidlistNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidlistNode1 = new ASingleIdList(tidNode2);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PArrayDeclarator parraydeclaratorNode4;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydeclaratorNode4 = (PArrayDeclarator)nodeArrayList2.get(0);

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, parraydeclaratorNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyArrayDeclarator pemptyarraydeclaratorNode3;
        PArrayDeclarator parraydeclaratorNode4;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptyarraydeclaratorNode3 = (PEmptyArrayDeclarator)nodeArrayList2.get(0);
        parraydeclaratorNode4 = (PArrayDeclarator)nodeArrayList3.get(0);

        pfpartypeNode1 = new AFparType(pdatatypeNode2, pemptyarraydeclaratorNode3, parraydeclaratorNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayDeclarator parraydeclaratorNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydeclaratorNode3 = (PArrayDeclarator)nodeArrayList2.get(0);

        ptypeNode1 = new AType(pdatatypeNode2, parraydeclaratorNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ADataRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADataRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TKwNothing tkwnothingNode2;
        tkwnothingNode2 = (TKwNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tkwnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tkwintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwChar tkwcharNode2;
        tkwcharNode2 = (TKwChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tkwcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AMatchedStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PMatched pmatchedNode2;
        pmatchedNode2 = (PMatched)nodeArrayList1.get(0);

        pstmtNode1 = new AMatchedStmt(pmatchedNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AUnmatchedStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PUnmatched punmatchedNode2;
        punmatchedNode2 = (PUnmatched)nodeArrayList1.get(0);

        pstmtNode1 = new AUnmatchedStmt(punmatchedNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AIfMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        PMatchedIf pmatchedifNode2;
        pmatchedifNode2 = (PMatchedIf)nodeArrayList1.get(0);

        pmatchedNode1 = new AIfMatched(pmatchedifNode2);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AWhileMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        PMatchedWhile pmatchedwhileNode2;
        pmatchedwhileNode2 = (PMatchedWhile)nodeArrayList1.get(0);

        pmatchedNode1 = new AWhileMatched(pmatchedwhileNode2);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ANoopMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pmatchedNode1 = new ANoopMatched(tsemicolonNode2);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAssignMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        PLValue plvalueNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        TSemicolon tsemicolonNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pmatchedNode1 = new AAssignMatched(plvalueNode2, tassignNode3, pexprNode4, tsemicolonNode5);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ABlockMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pmatchedNode1 = new ABlockMatched(pblockNode2);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AFuncCallMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemicolon tsemicolonNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pmatchedNode1 = new AFuncCallMatched(pfunccallNode2, tsemicolonNode3);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAreturnmatched1Matched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemicolon tsemicolonNode4;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList2.get(0);

        pmatchedNode1 = new AReturnMatched(tkwreturnNode2, null, tsemicolonNode4);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAreturnmatched2Matched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatched pmatchedNode1;
        {
            // Block
        TKwReturn tkwreturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        tkwreturnNode2 = (TKwReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pmatchedNode1 = new AReturnMatched(tkwreturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(pmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIfUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnmatched punmatchedNode1;
        {
            // Block
        PUnmatchedIf punmatchedifNode2;
        punmatchedifNode2 = (PUnmatchedIf)nodeArrayList1.get(0);

        punmatchedNode1 = new AIfUnmatched(punmatchedifNode2);
        }
	nodeList.add(punmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AWhileUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnmatched punmatchedNode1;
        {
            // Block
        PUnmatchedWhile punmatchedwhileNode2;
        punmatchedwhileNode2 = (PUnmatchedWhile)nodeArrayList1.get(0);

        punmatchedNode1 = new AWhileUnmatched(punmatchedwhileNode2);
        }
	nodeList.add(punmatchedNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AMatchedIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatchedIf pmatchedifNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PCond pcondNode3;
        TKwThen tkwthenNode4;
        PMatched pmatchedNode5;
        TKwElse tkwelseNode6;
        PMatched pmatchedNode7;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwThen)nodeArrayList3.get(0);
        pmatchedNode5 = (PMatched)nodeArrayList4.get(0);
        tkwelseNode6 = (TKwElse)nodeArrayList5.get(0);
        pmatchedNode7 = (PMatched)nodeArrayList6.get(0);

        pmatchedifNode1 = new AMatchedIf(tkwifNode2, pcondNode3, tkwthenNode4, pmatchedNode5, tkwelseNode6, pmatchedNode7);
        }
	nodeList.add(pmatchedifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ANoElseUnmatchedIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnmatchedIf punmatchedifNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PCond pcondNode3;
        TKwThen tkwthenNode4;
        PStmt pstmtNode5;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwThen)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        punmatchedifNode1 = new ANoElseUnmatchedIf(tkwifNode2, pcondNode3, tkwthenNode4, pstmtNode5);
        }
	nodeList.add(punmatchedifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AWithElseUnmatchedIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnmatchedIf punmatchedifNode1;
        {
            // Block
        TKwIf tkwifNode2;
        PCond pcondNode3;
        TKwThen tkwthenNode4;
        PMatched pmatchedNode5;
        TKwElse tkwelseNode6;
        PUnmatched punmatchedNode7;
        tkwifNode2 = (TKwIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwThen)nodeArrayList3.get(0);
        pmatchedNode5 = (PMatched)nodeArrayList4.get(0);
        tkwelseNode6 = (TKwElse)nodeArrayList5.get(0);
        punmatchedNode7 = (PUnmatched)nodeArrayList6.get(0);

        punmatchedifNode1 = new AWithElseUnmatchedIf(tkwifNode2, pcondNode3, tkwthenNode4, pmatchedNode5, tkwelseNode6, punmatchedNode7);
        }
	nodeList.add(punmatchedifNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AMatchedWhile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMatchedWhile pmatchedwhileNode1;
        {
            // Block
        TKwWhile tkwwhileNode2;
        PCond pcondNode3;
        TKwDo tkwdoNode4;
        PMatched pmatchedNode5;
        tkwwhileNode2 = (TKwWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tkwdoNode4 = (TKwDo)nodeArrayList3.get(0);
        pmatchedNode5 = (PMatched)nodeArrayList4.get(0);

        pmatchedwhileNode1 = new AMatchedWhile(tkwwhileNode2, pcondNode3, tkwdoNode4, pmatchedNode5);
        }
	nodeList.add(pmatchedwhileNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AUnmatchedWhile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PUnmatchedWhile punmatchedwhileNode1;
        {
            // Block
        TKwWhile tkwwhileNode2;
        PCond pcondNode3;
        TKwDo tkwdoNode4;
        PUnmatched punmatchedNode5;
        tkwwhileNode2 = (TKwWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tkwdoNode4 = (TKwDo)nodeArrayList3.get(0);
        punmatchedNode5 = (PUnmatched)nodeArrayList4.get(0);

        punmatchedwhileNode1 = new AUnmatchedWhile(tkwwhileNode2, pcondNode3, tkwdoNode4, punmatchedNode5);
        }
	nodeList.add(punmatchedwhileNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode3 = new LinkedList();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode4 = new LinkedList();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAfunccall2$Amultiexprlist11FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PExprList pexprlistNode4;
        TRPar trparNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        PExpr pexprNode5;
        LinkedList listNode6 = new LinkedList();
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        }

        pexprlistNode4 = new AMultiExprList(pexprNode5, listNode6);
        }
        trparNode7 = (TRPar)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, pexprlistNode4, trparNode7);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAfunccall2$Amultiexprlist21FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PExprList pexprlistNode4;
        TRPar trparNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        PExpr pexprNode5;
        LinkedList listNode7 = new LinkedList();
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pexprlistNode4 = new AMultiExprList(pexprNode5, listNode7);
        }
        trparNode8 = (TRPar)nodeArrayList5.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, pexprlistNode4, trparNode8);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAfunccall2$Empty1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PExprList pexprlistNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block

        pexprlistNode4 = new AEmptyExprList();
        }
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, pexprlistNode4, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprListTail pexprlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprlisttailNode1 = new AExprListTail(tcommaNode2, pexprNode3);
        }
	nodeList.add(pexprlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAarraydeclarraydeclarator1ArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRBracket trbracketNode4;
        LinkedList listNode5 = new LinkedList();
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);
        {
            // Block
        }

        parraydeclaratorNode1 = new AArrayDeclArrayDeclarator(tlbracketNode2, tintconstNode3, trbracketNode4, listNode5);
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAarraydeclarraydeclarator2ArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRBracket trbracketNode4;
        LinkedList listNode6 = new LinkedList();
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        parraydeclaratorNode1 = new AArrayDeclArrayDeclarator(tlbracketNode2, tintconstNode3, trbracketNode4, listNode6);
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ANoArrayDeclArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block

        parraydeclaratorNode1 = new ANoArrayDeclArrayDeclarator();
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AArrayDeclaratorTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDeclaratorTail parraydeclaratortailNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        parraydeclaratortailNode1 = new AArrayDeclaratorTail(tlbracketNode2, tintconstNode3, trbracketNode4);
        }
	nodeList.add(parraydeclaratortailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AEmptyArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmptyArrayDeclarator pemptyarraydeclaratorNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TRBracket trbracketNode3;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRBracket)nodeArrayList2.get(0);

        pemptyarraydeclaratorNode1 = new AEmptyArrayDeclarator(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(pemptyarraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLValue(tidNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AStrLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new AStrLValue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AExprLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TLBracket tlbracketNode3;
        PExpr pexprNode4;
        TRBracket trbracketNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        plvalueNode1 = new AExprLValue(plvalueNode2, tlbracketNode3, pexprNode4, trbracketNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ASubExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PSignedFactor psignedfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        psignedfactorNode4 = (PSignedFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, psignedfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TKwDiv tkwdivNode3;
        PSignedFactor psignedfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tkwdivNode3 = (TKwDiv)nodeArrayList2.get(0);
        psignedfactorNode4 = (PSignedFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tkwdivNode3, psignedfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TKwMod tkwmodNode3;
        PSignedFactor psignedfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tkwmodNode3 = (TKwMod)nodeArrayList2.get(0);
        psignedfactorNode4 = (PSignedFactor)nodeArrayList3.get(0);

        ptermNode1 = new AModTerm(ptermNode2, tkwmodNode3, psignedfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ASFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PSignedFactor psignedfactorNode2;
        psignedfactorNode2 = (PSignedFactor)nodeArrayList1.get(0);

        ptermNode1 = new ASFactorTerm(psignedfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce APosSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedFactor psignedfactorNode1;
        {
            // Block
        TPlus tplusNode2;
        PSignedFactor psignedfactorNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        psignedfactorNode3 = (PSignedFactor)nodeArrayList2.get(0);

        psignedfactorNode1 = new APosSignedFactor(tplusNode2, psignedfactorNode3);
        }
	nodeList.add(psignedfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ANegSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedFactor psignedfactorNode1;
        {
            // Block
        TMinus tminusNode2;
        PSignedFactor psignedfactorNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        psignedfactorNode3 = (PSignedFactor)nodeArrayList2.get(0);

        psignedfactorNode1 = new ANegSignedFactor(tminusNode2, psignedfactorNode3);
        }
	nodeList.add(psignedfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AFactorSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedFactor psignedfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        psignedfactorNode1 = new AFactorSignedFactor(pfactorNode2);
        }
	nodeList.add(psignedfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AIntFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pfactorNode1 = new AIntFactor(tintconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ACharFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pfactorNode1 = new ACharFactor(tcharconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ALvalFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        pfactorNode1 = new ALvalFactor(plvalueNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AFuncFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pfactorNode1 = new AFuncFactor(pfunccallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AParensFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfactorNode1 = new AParensFactor(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AOrCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TKwOr tkworNode3;
        PCond1 pcond1Node4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        tkworNode3 = (TKwOr)nodeArrayList2.get(0);
        pcond1Node4 = (PCond1)nodeArrayList3.get(0);

        pcondNode1 = new AOrCond(pcondNode2, tkworNode3, pcond1Node4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ACond1Cond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond1 pcond1Node2;
        pcond1Node2 = (PCond1)nodeArrayList1.get(0);

        pcondNode1 = new ACond1Cond(pcond1Node2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AAndCond1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond1 pcond1Node1;
        {
            // Block
        PCond1 pcond1Node2;
        TKwAnd tkwandNode3;
        PCond2 pcond2Node4;
        pcond1Node2 = (PCond1)nodeArrayList1.get(0);
        tkwandNode3 = (TKwAnd)nodeArrayList2.get(0);
        pcond2Node4 = (PCond2)nodeArrayList3.get(0);

        pcond1Node1 = new AAndCond1(pcond1Node2, tkwandNode3, pcond2Node4);
        }
	nodeList.add(pcond1Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ACond2Cond1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond1 pcond1Node1;
        {
            // Block
        PCond2 pcond2Node2;
        pcond2Node2 = (PCond2)nodeArrayList1.get(0);

        pcond1Node1 = new ACond2Cond1(pcond2Node2);
        }
	nodeList.add(pcond1Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ANotCond2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond2 pcond2Node1;
        {
            // Block
        TKwNot tkwnotNode2;
        PCond3 pcond3Node3;
        tkwnotNode2 = (TKwNot)nodeArrayList1.get(0);
        pcond3Node3 = (PCond3)nodeArrayList2.get(0);

        pcond2Node1 = new ANotCond2(tkwnotNode2, pcond3Node3);
        }
	nodeList.add(pcond2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ACond3Cond2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond2 pcond2Node1;
        {
            // Block
        PCond3 pcond3Node2;
        pcond3Node2 = (PCond3)nodeArrayList1.get(0);

        pcond2Node1 = new ACond3Cond2(pcond3Node2);
        }
	nodeList.add(pcond2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AExprCmpCond3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond3 pcond3Node1;
        {
            // Block
        PExpr pexprNode2;
        PCmpOp pcmpopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pcmpopNode3 = (PCmpOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pcond3Node1 = new AExprCmpCond3(pexprNode2, pcmpopNode3, pexprNode4);
        }
	nodeList.add(pcond3Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ABoolCond3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond3 pcond3Node1;
        {
            // Block
        PBool pboolNode2;
        pboolNode2 = (PBool)nodeArrayList1.get(0);

        pcond3Node1 = new ABoolCond3(pboolNode2);
        }
	nodeList.add(pcond3Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ATrueBool */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pboolNode1 = new ATrueBool(ttrueNode2);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AFalseBool */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pboolNode1 = new AFalseBool(tfalseNode2);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ACParensBool */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TLPar tlparNode2;
        PCond pcondNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pboolNode1 = new ACParensBool(tlparNode2, pcondNode3, trparNode4);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AEqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pcmpopNode1 = new AEqCmpOp(teqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ANeqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        pcmpopNode1 = new ANeqCmpOp(tneqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ALtCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcmpopNode1 = new ALtCmpOp(tltNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AGtCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcmpopNode1 = new AGtCmpOp(tgtNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ALeqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TLteq tlteqNode2;
        tlteqNode2 = (TLteq)nodeArrayList1.get(0);

        pcmpopNode1 = new ALeqCmpOp(tlteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AGeqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TGteq tgteqNode2;
        tgteqNode2 = (TGteq)nodeArrayList1.get(0);

        pcmpopNode1 = new AGeqCmpOp(tgteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce ATerminal$FparListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparListTail pfparlisttailNode1;
        pfparlisttailNode1 = (PFparListTail)nodeArrayList1.get(0);
	if(pfparlisttailNode1 != null)
	{
	  listNode2.add(pfparlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ANonTerminal$FparListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFparListTail pfparlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfparlisttailNode2 = (PFparListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfparlisttailNode2 != null)
	{
	  listNode3.add(pfparlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ATerminal$ExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExprListTail pexprlisttailNode1;
        pexprlisttailNode1 = (PExprListTail)nodeArrayList1.get(0);
	if(pexprlisttailNode1 != null)
	{
	  listNode2.add(pexprlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ANonTerminal$ExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExprListTail pexprlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprlisttailNode2 = (PExprListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprlisttailNode2 != null)
	{
	  listNode3.add(pexprlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ATerminal$ArrayDeclaratorTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArrayDeclaratorTail parraydeclaratortailNode1;
        parraydeclaratortailNode1 = (PArrayDeclaratorTail)nodeArrayList1.get(0);
	if(parraydeclaratortailNode1 != null)
	{
	  listNode2.add(parraydeclaratortailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ANonTerminal$ArrayDeclaratorTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PArrayDeclaratorTail parraydeclaratortailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraydeclaratortailNode2 = (PArrayDeclaratorTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraydeclaratortailNode2 != null)
	{
	  listNode3.add(parraydeclaratortailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {32, SHIFT, 1}, },
			{{-1, ERROR, 1}, {41, SHIFT, 5}, },
			{{-1, ERROR, 2}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {4, SHIFT, 6}, {25, SHIFT, 7}, {32, SHIFT, 1}, },
			{{-1, ERROR, 5}, {0, SHIFT, 15}, },
			{{-1, ERROR, 6}, {4, SHIFT, 6}, {5, SHIFT, 16}, {7, SHIFT, 17}, {28, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 7}, {41, SHIFT, 34}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 11}, {4, SHIFT, 6}, {7, SHIFT, 36}, {25, SHIFT, 7}, {32, SHIFT, 1}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 14}, {4, SHIFT, 6}, {25, SHIFT, 7}, {32, SHIFT, 1}, },
			{{-1, ERROR, 15}, {1, SHIFT, 39}, {34, SHIFT, 40}, {41, SHIFT, 34}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 18}, {0, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {27, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {39, SHIFT, 50}, {40, SHIFT, 51}, {41, SHIFT, 22}, },
			{{-1, ERROR, 19}, {0, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {27, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {39, SHIFT, 50}, {40, SHIFT, 51}, {41, SHIFT, 22}, },
			{{-1, ERROR, 20}, {0, SHIFT, 64}, {7, SHIFT, 65}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 67}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 31}, {7, SHIFT, 68}, },
			{{-1, ERROR, 32}, {2, SHIFT, 69}, {9, SHIFT, 70}, },
			{{-1, ERROR, 33}, {4, SHIFT, 6}, {5, SHIFT, 71}, {7, SHIFT, 17}, {28, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 16}, {8, SHIFT, 73}, },
			{{-1, ERROR, 35}, {6, SHIFT, 74}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 39}, {6, SHIFT, 75}, },
			{{-1, ERROR, 40}, {41, SHIFT, 34}, },
			{{-1, ERROR, 41}, {1, SHIFT, 77}, },
			{{-1, REDUCE, 9}, {7, SHIFT, 78}, },
			{{-1, ERROR, 43}, {6, SHIFT, 81}, },
			{{-1, ERROR, 44}, {0, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {27, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {39, SHIFT, 50}, {40, SHIFT, 51}, {41, SHIFT, 22}, },
			{{-1, ERROR, 45}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 46}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 47}, {0, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {39, SHIFT, 50}, {40, SHIFT, 51}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, {2, SHIFT, 69}, },
			{{-1, ERROR, 54}, {10, SHIFT, 87}, {11, SHIFT, 88}, {13, SHIFT, 89}, {14, SHIFT, 90}, {15, SHIFT, 91}, {16, SHIFT, 92}, {17, SHIFT, 93}, {18, SHIFT, 94}, },
			{{-1, REDUCE, 57}, {12, SHIFT, 96}, {24, SHIFT, 97}, {26, SHIFT, 98}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 58}, {20, SHIFT, 99}, {29, SHIFT, 100}, },
			{{-1, REDUCE, 71}, {19, SHIFT, 101}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 63}, {20, SHIFT, 99}, {22, SHIFT, 102}, },
			{{-1, ERROR, 64}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 66}, {7, SHIFT, 104}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, ERROR, 67}, {0, SHIFT, 64}, {1, SHIFT, 105}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 69}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 70}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 73}, {41, SHIFT, 34}, },
			{{-1, ERROR, 74}, {21, SHIFT, 110}, {23, SHIFT, 111}, },
			{{-1, ERROR, 75}, {21, SHIFT, 110}, {23, SHIFT, 111}, {35, SHIFT, 114}, },
			{{-1, ERROR, 76}, {6, SHIFT, 117}, },
			{{-1, ERROR, 77}, {6, SHIFT, 118}, },
			{{-1, ERROR, 78}, {34, SHIFT, 40}, {41, SHIFT, 34}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 10}, {7, SHIFT, 78}, },
			{{-1, ERROR, 81}, {21, SHIFT, 110}, {23, SHIFT, 111}, },
			{{-1, ERROR, 82}, {1, SHIFT, 123}, {10, SHIFT, 87}, {11, SHIFT, 88}, {13, SHIFT, 89}, {14, SHIFT, 90}, {15, SHIFT, 91}, {16, SHIFT, 92}, {17, SHIFT, 93}, {18, SHIFT, 94}, },
			{{-1, ERROR, 83}, {1, SHIFT, 124}, {20, SHIFT, 99}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 87}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 88}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 95}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 96}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 97}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 98}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 99}, {0, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {27, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {39, SHIFT, 50}, {40, SHIFT, 51}, {41, SHIFT, 22}, },
			{{-1, ERROR, 100}, {4, SHIFT, 6}, {7, SHIFT, 17}, {28, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 101}, {0, SHIFT, 44}, {10, SHIFT, 45}, {11, SHIFT, 46}, {27, SHIFT, 47}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {39, SHIFT, 50}, {40, SHIFT, 51}, {41, SHIFT, 22}, },
			{{-1, ERROR, 102}, {4, SHIFT, 6}, {7, SHIFT, 17}, {28, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, ERROR, 103}, {1, SHIFT, 123}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 106}, {1, SHIFT, 137}, {8, SHIFT, 138}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, ERROR, 107}, {3, SHIFT, 141}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, ERROR, 108}, {7, SHIFT, 142}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 112}, {7, SHIFT, 143}, },
			{{-1, REDUCE, 49}, {2, SHIFT, 144}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 117}, {21, SHIFT, 110}, {23, SHIFT, 111}, },
			{{-1, ERROR, 118}, {21, SHIFT, 110}, {23, SHIFT, 111}, {35, SHIFT, 114}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 49}, {2, SHIFT, 148}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 55}, {12, SHIFT, 96}, {24, SHIFT, 97}, {26, SHIFT, 98}, },
			{{-1, REDUCE, 56}, {12, SHIFT, 96}, {24, SHIFT, 97}, {26, SHIFT, 98}, },
			{{-1, REDUCE, 76}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 70}, {19, SHIFT, 101}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 24}, {31, SHIFT, 151}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 138}, {0, SHIFT, 64}, {10, SHIFT, 45}, {11, SHIFT, 46}, {36, SHIFT, 48}, {37, SHIFT, 49}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 140}, {1, SHIFT, 153}, {8, SHIFT, 138}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 144}, {36, SHIFT, 155}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 148}, {3, SHIFT, 156}, {36, SHIFT, 155}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 49}, {2, SHIFT, 144}, },
			{{-1, ERROR, 151}, {4, SHIFT, 6}, {7, SHIFT, 17}, {28, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {41, SHIFT, 22}, },
			{{-1, REDUCE, 46}, {10, SHIFT, 87}, {11, SHIFT, 88}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 155}, {3, SHIFT, 160}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 47}, {2, SHIFT, 161}, },
			{{-1, ERROR, 161}, {36, SHIFT, 164}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 48}, {2, SHIFT, 161}, },
			{{-1, ERROR, 164}, {3, SHIFT, 166}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 50}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, },
			{{-1, 10}, {14, 37}, },
			{{-1, 11}, {0, 4}, },
			{{-1, 41}, },
			{{-1, 79}, {80, 120}, },
			{{-1, 42}, {78, 119}, },
			{{-1, 12}, },
			{{-1, 43}, {7, 35}, {40, 76}, {73, 109}, },
			{{-1, 121}, {117, 146}, },
			{{-1, 112}, },
			{{-1, 115}, {118, 147}, },
			{{-1, 122}, {74, 113}, {75, 116}, {118, 116}, },
			{{-1, 23}, {33, 72}, {102, 135}, },
			{{-1, 24}, {100, 132}, {102, 136}, {151, 158}, },
			{{-1, 25}, {100, 133}, {151, 159}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, {4, 13}, {11, 13}, {14, 38}, },
			{{-1, 52}, {6, 31}, {33, 31}, {100, 31}, {102, 31}, {151, 31}, },
			{{-1, 139}, {140, 154}, },
			{{-1, 145}, {122, 149}, {150, 157}, },
			{{-1, 162}, {163, 165}, },
			{{-1, 150}, },
			{{-1, 53}, {6, 32}, {33, 32}, {100, 32}, {102, 32}, {151, 32}, },
			{{-1, 54}, {20, 66}, {44, 82}, {64, 103}, {67, 106}, {69, 107}, {70, 108}, {95, 127}, {138, 152}, },
			{{-1, 55}, {87, 125}, {88, 126}, },
			{{-1, 56}, {45, 84}, {46, 85}, {96, 128}, {97, 129}, {98, 130}, },
			{{-1, 57}, },
			{{-1, 58}, {19, 63}, {44, 83}, },
			{{-1, 59}, {99, 131}, },
			{{-1, 60}, {101, 134}, },
			{{-1, 61}, {47, 86}, },
			{{-1, 62}, },
			{{-1, 95}, },
			{{-1, 14}, },
			{{-1, 80}, },
			{{-1, 33}, },
			{{-1, 140}, },
			{{-1, 163}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '{', 'var', 'fun'",
			"expecting: '('",
			"expecting: '{', '}', ';', 'while', 'if', 'return', string literal, id",
			"expecting: '{', ';', 'var', 'fun'",
			"expecting: '{', 'var', 'fun', EOF",
			"expecting: ')', 'ref', id",
			"expecting: '{', '}', ';', 'var', 'while', 'if', 'else', 'fun', 'return', string literal, id, EOF",
			"expecting: '{', '}', ';', 'while', 'if', 'else', 'return', string literal, id",
			"expecting: '(', '+', '-', 'not', int const, char const, string literal, 'TRUE', 'FALSE', id",
			"expecting: '(', ';', '+', '-', int const, char const, string literal, id",
			"expecting: ')', '[', ']', ';', ',', '<-', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: '(', ')', '[', ']', ';', ',', '<-', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: ';'",
			"expecting: '[', '<-'",
			"expecting: ':', ','",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: '(', '+', '-', int const, char const, string literal, id",
			"expecting: '(', '+', '-', int const, char const, string literal, 'TRUE', 'FALSE', id",
			"expecting: ')', ']', ';', ',', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: ')', 'and', 'or', 'then', 'do'",
			"expecting: ')', '[', ']', ';', ',', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: '+', '-', '=', '#', '<', '>', '<=', '>='",
			"expecting: 'or', 'do'",
			"expecting: 'or', 'then'",
			"expecting: ';', '+', '-'",
			"expecting: '(', ')', '+', '-', int const, char const, string literal, id",
			"expecting: 'int', 'char'",
			"expecting: 'int', 'char', 'nothing'",
			"expecting: 'ref', id",
			"expecting: ')', '+', '-', '=', '#', '<', '>', '<=', '>='",
			"expecting: ')', 'or'",
			"expecting: '{', ';', 'while', 'if', 'return', string literal, id",
			"expecting: ')', '+', '-'",
			"expecting: ')', ',', '+', '-'",
			"expecting: ']', '+', '-'",
			"expecting: ')', '[', '{', ';', 'var', 'fun'",
			"expecting: '[', ';'",
			"expecting: ')', '[', ';'",
			"expecting: ')', '+', '-', 'and', 'or', 'then', 'do'",
			"expecting: ')', ','",
			"expecting: int const",
			"expecting: ']', int const",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 1, 3, 3, 3, 6, 3, 7, 3, 8, 9, 10, 11, 11, 12, 13, 14, 5, 5, 5, 10, 5, 10, 5, 10, 15, 16, 5, 17, 18, 3, 3, 7, 18, 1, 19, 20, 18, 11, 21, 21, 22, 23, 23, 24, 24, 23, 25, 26, 23, 23, 23, 27, 24, 24, 24, 24, 28, 21, 10, 29, 30, 10, 21, 21, 9, 5, 1, 31, 32, 18, 18, 33, 20, 20, 31, 34, 35, 23, 23, 24, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 11, 36, 11, 36, 37, 10, 23, 38, 39, 29, 18, 40, 40, 15, 41, 6, 6, 6, 31, 32, 20, 20, 20, 42, 23, 24, 23, 23, 43, 23, 23, 23, 24, 10, 5, 24, 5, 10, 23, 21, 44, 44, 13, 10, 3, 45, 15, 20, 6, 46, 20, 42, 36, 38, 23, 44, 47, 42, 20, 10, 5, 42, 45, 42, 42, 47, 42, 42, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

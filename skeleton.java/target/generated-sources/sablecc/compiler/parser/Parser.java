/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AOneProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAsimplefuncdef1FuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAsimplefuncdef2FuncDef */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AFuncDecl */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AInnerDeclLocalDef */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AInnerDefLocalDef */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AInnerVarsLocalDef */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAfuncheaderheader1Header */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AAfuncheaderheader2Header */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AMultiFparList */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce ASingleFparList */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AByValFparDef */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce AByRefFparDef */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AVarDefVarDef */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AMultiSetIdList */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce ASingleSetIdList */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AAtypefpartype1FparType */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AAtypefpartype2FparType */
		    {
			ArrayList list = new17();
			push(goTo(9), list, false);
		    }
		    break;
                    case 18: /* reduce ASimpleType */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce ARetDataRetType */
		    {
			ArrayList list = new19();
			push(goTo(11), list, false);
		    }
		    break;
                    case 20: /* reduce ARetNothRetType */
		    {
			ArrayList list = new20();
			push(goTo(11), list, false);
		    }
		    break;
                    case 21: /* reduce ATIntDataType */
		    {
			ArrayList list = new21();
			push(goTo(12), list, false);
		    }
		    break;
                    case 22: /* reduce ATCharDataType */
		    {
			ArrayList list = new22();
			push(goTo(12), list, false);
		    }
		    break;
                    case 23: /* reduce AEmptyStmt */
		    {
			ArrayList list = new23();
			push(goTo(13), list, false);
		    }
		    break;
                    case 24: /* reduce AAoneblock1Block */
		    {
			ArrayList list = new24();
			push(goTo(14), list, false);
		    }
		    break;
                    case 25: /* reduce AAoneblock2Block */
		    {
			ArrayList list = new25();
			push(goTo(14), list, false);
		    }
		    break;
                    case 26: /* reduce AArrayDeclArrayDeclarator */
		    {
			ArrayList list = new26();
			push(goTo(15), list, false);
		    }
		    break;
                    case 27: /* reduce AEmptyDeclArrayDeclarator */
		    {
			ArrayList list = new27();
			push(goTo(15), list, false);
		    }
		    break;
                    case 28: /* reduce AEmptyArrayDeclEmptyArrayDeclarator */
		    {
			ArrayList list = new28();
			push(goTo(16), list, false);
		    }
		    break;
                    case 29: /* reduce ALvalIdLValue */
		    {
			ArrayList list = new29();
			push(goTo(17), list, false);
		    }
		    break;
                    case 30: /* reduce ALvalStrLValue */
		    {
			ArrayList list = new30();
			push(goTo(17), list, false);
		    }
		    break;
                    case 31: /* reduce ALvalExprLValue */
		    {
			ArrayList list = new31();
			push(goTo(17), list, false);
		    }
		    break;
                    case 32: /* reduce AAddExpr */
		    {
			ArrayList list = new32();
			push(goTo(18), list, false);
		    }
		    break;
                    case 33: /* reduce ASubExpr */
		    {
			ArrayList list = new33();
			push(goTo(18), list, false);
		    }
		    break;
                    case 34: /* reduce ATermExpr */
		    {
			ArrayList list = new34();
			push(goTo(18), list, false);
		    }
		    break;
                    case 35: /* reduce AMultTerm */
		    {
			ArrayList list = new35();
			push(goTo(19), list, false);
		    }
		    break;
                    case 36: /* reduce ADivTerm */
		    {
			ArrayList list = new36();
			push(goTo(19), list, false);
		    }
		    break;
                    case 37: /* reduce AModTerm */
		    {
			ArrayList list = new37();
			push(goTo(19), list, false);
		    }
		    break;
                    case 38: /* reduce ASFactorTerm */
		    {
			ArrayList list = new38();
			push(goTo(19), list, false);
		    }
		    break;
                    case 39: /* reduce APosSignedFactor */
		    {
			ArrayList list = new39();
			push(goTo(20), list, false);
		    }
		    break;
                    case 40: /* reduce ANegSignedFactor */
		    {
			ArrayList list = new40();
			push(goTo(20), list, false);
		    }
		    break;
                    case 41: /* reduce AFactorSignedFactor */
		    {
			ArrayList list = new41();
			push(goTo(20), list, false);
		    }
		    break;
                    case 42: /* reduce AFIntFactor */
		    {
			ArrayList list = new42();
			push(goTo(21), list, false);
		    }
		    break;
                    case 43: /* reduce AFParensFactor */
		    {
			ArrayList list = new43();
			push(goTo(21), list, false);
		    }
		    break;
                    case 44: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new44();
			push(goTo(22), list, true);
		    }
		    break;
                    case 45: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new45();
			push(goTo(22), list, true);
		    }
		    break;
                    case 46: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new46();
			push(goTo(23), list, true);
		    }
		    break;
                    case 47: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new47();
			push(goTo(23), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AOneProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pprogramNode1 = new AOneProgram(pexprNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAsimplefuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new ASimpleFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAsimplefuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new ASimpleFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemicolon tsemicolonNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tsemicolonNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AInnerDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AInnerDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AInnerDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AInnerDefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AInnerVarsLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AInnerVarsLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAfuncheaderheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKwFun tkwfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tkwfunNode2 = (TKwFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        prettypeNode8 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AFuncHeaderHeader(tkwfunNode2, tidNode3, tlparNode4, null, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAfuncheaderheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKwFun tkwfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PFparList pfparlistNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tkwfunNode2 = (TKwFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pfparlistNode5 = (PFparList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        prettypeNode8 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AFuncHeaderHeader(tkwfunNode2, tidNode3, tlparNode4, pfparlistNode5, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AMultiFparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparList pfparlistNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        TSemicolon tsemicolonNode3;
        PFparList pfparlistNode4;
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pfparlistNode4 = (PFparList)nodeArrayList3.get(0);

        pfparlistNode1 = new AMultiFparList(pfpardefNode2, tsemicolonNode3, pfparlistNode4);
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ASingleFparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparList pfparlistNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);

        pfparlistNode1 = new ASingleFparList(pfpardefNode2);
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AByValFparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        PIdList pidlistNode2;
        TColon tcolonNode3;
        PDataType pdatatypeNode4;
        pidlistNode2 = (PIdList)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pdatatypeNode4 = (PDataType)nodeArrayList3.get(0);

        pfpardefNode1 = new AByValFparDef(pidlistNode2, tcolonNode3, pdatatypeNode4);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AByRefFparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TKwRef tkwrefNode2;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PFparType pfpartypeNode5;
        tkwrefNode2 = (TKwRef)nodeArrayList1.get(0);
        pidlistNode3 = (PIdList)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode5 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AByRefFparDef(tkwrefNode2, pidlistNode3, tcolonNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AVarDefVarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TKwVar tkwvarNode2;
        PIdList pidlistNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tkwvarNode2 = (TKwVar)nodeArrayList1.get(0);
        pidlistNode3 = (PIdList)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDefVarDef(tkwvarNode2, pidlistNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AMultiSetIdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdList pidlistNode1;
        {
            // Block
        TId tidNode2;
        TComma tcommaNode3;
        PIdList pidlistNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pidlistNode4 = (PIdList)nodeArrayList3.get(0);

        pidlistNode1 = new AMultiSetIdList(tidNode2, tcommaNode3, pidlistNode4);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ASingleSetIdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIdList pidlistNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidlistNode1 = new ASingleSetIdList(tidNode2);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAtypefpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PArrayDeclarator parraydeclaratorNode4;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydeclaratorNode4 = (PArrayDeclarator)nodeArrayList2.get(0);

        pfpartypeNode1 = new ATypeFparType(pdatatypeNode2, null, parraydeclaratorNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAtypefpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyArrayDeclarator pemptyarraydeclaratorNode3;
        PArrayDeclarator parraydeclaratorNode4;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptyarraydeclaratorNode3 = (PEmptyArrayDeclarator)nodeArrayList2.get(0);
        parraydeclaratorNode4 = (PArrayDeclarator)nodeArrayList3.get(0);

        pfpartypeNode1 = new ATypeFparType(pdatatypeNode2, pemptyarraydeclaratorNode3, parraydeclaratorNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ASimpleType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayDeclarator parraydeclaratorNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydeclaratorNode3 = (PArrayDeclarator)nodeArrayList2.get(0);

        ptypeNode1 = new ASimpleType(pdatatypeNode2, parraydeclaratorNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ARetDataRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ARetDataRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ARetNothRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TKwNothing tkwnothingNode2;
        tkwnothingNode2 = (TKwNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ARetNothRetType(tkwnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ATIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new ATIntDataType(tkwintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ATCharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwChar tkwcharNode2;
        tkwcharNode2 = (TKwChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ATCharDataType(tkwcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AEmptyStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstmtNode1 = new AEmptyStmt(tsemicolonNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAoneblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode3 = new LinkedList();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new AOneBlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAoneblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode4 = new LinkedList();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new AOneBlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AArrayDeclArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRBracket trbracketNode4;
        PArrayDeclarator parraydeclaratorNode5;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);
        parraydeclaratorNode5 = (PArrayDeclarator)nodeArrayList4.get(0);

        parraydeclaratorNode1 = new AArrayDeclArrayDeclarator(tlbracketNode2, tintconstNode3, trbracketNode4, parraydeclaratorNode5);
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AEmptyDeclArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block

        parraydeclaratorNode1 = new AEmptyDeclArrayDeclarator();
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AEmptyArrayDeclEmptyArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmptyArrayDeclarator pemptyarraydeclaratorNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TRBracket trbracketNode3;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRBracket)nodeArrayList2.get(0);

        pemptyarraydeclaratorNode1 = new AEmptyArrayDeclEmptyArrayDeclarator(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(pemptyarraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ALvalIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new ALvalIdLValue(tidNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ALvalStrLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new ALvalStrLValue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ALvalExprLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TLBracket tlbracketNode3;
        PExpr pexprNode4;
        TRBracket trbracketNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        plvalueNode1 = new ALvalExprLValue(plvalueNode2, tlbracketNode3, pexprNode4, trbracketNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ASubExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PSignedFactor psignedfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        psignedfactorNode4 = (PSignedFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, psignedfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TKwDiv tkwdivNode3;
        PSignedFactor psignedfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tkwdivNode3 = (TKwDiv)nodeArrayList2.get(0);
        psignedfactorNode4 = (PSignedFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tkwdivNode3, psignedfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TKwMod tkwmodNode3;
        PSignedFactor psignedfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tkwmodNode3 = (TKwMod)nodeArrayList2.get(0);
        psignedfactorNode4 = (PSignedFactor)nodeArrayList3.get(0);

        ptermNode1 = new AModTerm(ptermNode2, tkwmodNode3, psignedfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ASFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PSignedFactor psignedfactorNode2;
        psignedfactorNode2 = (PSignedFactor)nodeArrayList1.get(0);

        ptermNode1 = new ASFactorTerm(psignedfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce APosSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedFactor psignedfactorNode1;
        {
            // Block
        TPlus tplusNode2;
        PSignedFactor psignedfactorNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        psignedfactorNode3 = (PSignedFactor)nodeArrayList2.get(0);

        psignedfactorNode1 = new APosSignedFactor(tplusNode2, psignedfactorNode3);
        }
	nodeList.add(psignedfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ANegSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedFactor psignedfactorNode1;
        {
            // Block
        TMinus tminusNode2;
        PSignedFactor psignedfactorNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        psignedfactorNode3 = (PSignedFactor)nodeArrayList2.get(0);

        psignedfactorNode1 = new ANegSignedFactor(tminusNode2, psignedfactorNode3);
        }
	nodeList.add(psignedfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AFactorSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedFactor psignedfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        psignedfactorNode1 = new AFactorSignedFactor(pfactorNode2);
        }
	nodeList.add(psignedfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AFIntFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pfactorNode1 = new AFIntFactor(tintconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AFParensFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfactorNode1 = new AFParensFactor(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 2}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 3}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 5}, {40, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {10, SHIFT, 13}, {11, SHIFT, 14}, },
			{{-1, REDUCE, 34}, {12, SHIFT, 15}, {24, SHIFT, 16}, {26, SHIFT, 17}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 10}, {1, SHIFT, 18}, {10, SHIFT, 13}, {11, SHIFT, 14}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 13}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 14}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 15}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 16}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 17}, {0, SHIFT, 1}, {10, SHIFT, 2}, {11, SHIFT, 3}, {36, SHIFT, 4}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 32}, {12, SHIFT, 15}, {24, SHIFT, 16}, {26, SHIFT, 17}, },
			{{-1, REDUCE, 33}, {12, SHIFT, 15}, {24, SHIFT, 16}, {26, SHIFT, 17}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 6}, {1, 10}, },
			{{-1, 7}, {13, 19}, {14, 20}, },
			{{-1, 8}, {2, 11}, {3, 12}, {15, 21}, {16, 22}, {17, 23}, },
			{{-1, 9}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '(', '+', '-', int const",
			"expecting: ')', '+', '-', '*', 'mod', 'div', EOF",
			"expecting: EOF",
			"expecting: '+', '-', EOF",
			"expecting: ')', '+', '-'",
        };*/
    private static int[] errors;
/*      {
			0, 0, 0, 0, 1, 2, 3, 1, 1, 1, 4, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

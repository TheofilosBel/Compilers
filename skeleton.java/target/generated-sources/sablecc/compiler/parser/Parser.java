/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AOneProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AVarDefVarDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AMultiSetSetOfIds */
		    {
			ArrayList list = new2();
			push(goTo(2), list, false);
		    }
		    break;
                    case 3: /* reduce ASingleSetSetOfIds */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce ASimpleType */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce ATRetRetType */
		    {
			ArrayList list = new5();
			push(goTo(4), list, false);
		    }
		    break;
                    case 6: /* reduce ARetType */
		    {
			ArrayList list = new6();
			push(goTo(4), list, false);
		    }
		    break;
                    case 7: /* reduce ATIntDataType */
		    {
			ArrayList list = new7();
			push(goTo(5), list, false);
		    }
		    break;
                    case 8: /* reduce ATCharDataType */
		    {
			ArrayList list = new8();
			push(goTo(5), list, false);
		    }
		    break;
                    case 9: /* reduce AArrayDeclArrayDeclarator */
		    {
			ArrayList list = new9();
			push(goTo(6), list, false);
		    }
		    break;
                    case 10: /* reduce AEmptyDeclArrayDeclarator */
		    {
			ArrayList list = new10();
			push(goTo(6), list, false);
		    }
		    break;
                    case 11: /* reduce ATerminal$VarDef */
		    {
			ArrayList list = new11();
			push(goTo(7), list, true);
		    }
		    break;
                    case 12: /* reduce ANonTerminal$VarDef */
		    {
			ArrayList list = new12();
			push(goTo(7), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AOneProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AOneProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AVarDefVarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TKwVar tkwvarNode2;
        PSetOfIds psetofidsNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tkwvarNode2 = (TKwVar)nodeArrayList1.get(0);
        psetofidsNode3 = (PSetOfIds)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDefVarDef(tkwvarNode2, psetofidsNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AMultiSetSetOfIds */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSetOfIds psetofidsNode1;
        {
            // Block
        TId tidNode2;
        TComma tcommaNode3;
        PSetOfIds psetofidsNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        psetofidsNode4 = (PSetOfIds)nodeArrayList3.get(0);

        psetofidsNode1 = new AMultiSetSetOfIds(tidNode2, tcommaNode3, psetofidsNode4);
        }
	nodeList.add(psetofidsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ASingleSetSetOfIds */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSetOfIds psetofidsNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        psetofidsNode1 = new ASingleSetSetOfIds(tidNode2);
        }
	nodeList.add(psetofidsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ASimpleType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayDeclarator parraydeclaratorNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydeclaratorNode3 = (PArrayDeclarator)nodeArrayList2.get(0);

        ptypeNode1 = new ASimpleType(pdatatypeNode2, parraydeclaratorNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ATRetRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ATRetRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ARetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TKwNothing tkwnothingNode2;
        tkwnothingNode2 = (TKwNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ARetType(tkwnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ATIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new ATIntDataType(tkwintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ATCharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwChar tkwcharNode2;
        tkwcharNode2 = (TKwChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ATCharDataType(tkwcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AArrayDeclArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block
        PArrayDeclarator parraydeclaratorNode2;
        TLBracket tlbracketNode3;
        TIntConst tintconstNode4;
        TRBracket trbracketNode5;
        parraydeclaratorNode2 = (PArrayDeclarator)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        tintconstNode4 = (TIntConst)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        parraydeclaratorNode1 = new AArrayDeclArrayDeclarator(parraydeclaratorNode2, tlbracketNode3, tintconstNode4, trbracketNode5);
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AEmptyDeclArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PArrayDeclarator parraydeclaratorNode1;
        {
            // Block

        parraydeclaratorNode1 = new AEmptyDeclArrayDeclarator();
        }
	nodeList.add(parraydeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ATerminal$VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarDef pvardefNode1;
        pvardefNode1 = (PVarDef)nodeArrayList1.get(0);
	if(pvardefNode1 != null)
	{
	  listNode2.add(pvardefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ANonTerminal$VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDef pvardefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardefNode2 = (PVarDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardefNode2 != null)
	{
	  listNode3.add(pvardefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {30, SHIFT, 5}, },
			{{-1, ERROR, 2}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 0}, {18, SHIFT, 1}, },
			{{-1, REDUCE, 3}, {8, SHIFT, 8}, },
			{{-1, ERROR, 6}, {6, SHIFT, 9}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 8}, {30, SHIFT, 5}, },
			{{-1, ERROR, 9}, {14, SHIFT, 11}, {16, SHIFT, 12}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 13}, {7, SHIFT, 15}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, {2, SHIFT, 17}, },
			{{-1, ERROR, 17}, {29, SHIFT, 18}, },
			{{-1, ERROR, 18}, {3, SHIFT, 19}, },
			{{-1, REDUCE, 9}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 7}, },
			{{-1, 6}, {8, 10}, },
			{{-1, 13}, },
			{{-1, -1}, },
			{{-1, 14}, },
			{{-1, 16}, },
			{{-1, 4}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'var', EOF",
			"expecting: ':', ','",
			"expecting: ':'",
			"expecting: 'int', 'char'",
			"expecting: '[', ';'",
			"expecting: ';'",
			"expecting: int const",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 5, 3, 1, 6, 5, 7, 7, 8, 7, 3, 7, 9, 10, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

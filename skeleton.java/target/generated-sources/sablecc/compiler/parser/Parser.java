/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AFuncDefProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AFuncDefFuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AFuncDeclFuncDecl */
		    {
			ArrayList list = new2();
			push(goTo(2), list);
		    }
		    break;
                    case 3: /* reduce ANonEmptyLocalDefList */
		    {
			ArrayList list = new3();
			push(goTo(3), list);
		    }
		    break;
                    case 4: /* reduce AEmptyLocalDefList */
		    {
			ArrayList list = new4();
			push(goTo(3), list);
		    }
		    break;
                    case 5: /* reduce AInnerDeclLocalDef */
		    {
			ArrayList list = new5();
			push(goTo(4), list);
		    }
		    break;
                    case 6: /* reduce AInnerDefLocalDef */
		    {
			ArrayList list = new6();
			push(goTo(4), list);
		    }
		    break;
                    case 7: /* reduce AInnerVarsLocalDef */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AHeaderHeader */
		    {
			ArrayList list = new8();
			push(goTo(5), list);
		    }
		    break;
                    case 9: /* reduce AAmultifparfparlist1FparList */
		    {
			ArrayList list = new9();
			push(goTo(6), list);
		    }
		    break;
                    case 10: /* reduce AAmultifparfparlist2FparList */
		    {
			ArrayList list = new10();
			push(goTo(6), list);
		    }
		    break;
                    case 11: /* reduce AEmptyFparList */
		    {
			ArrayList list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce AFparListTail */
		    {
			ArrayList list = new12();
			push(goTo(7), list);
		    }
		    break;
                    case 13: /* reduce AByRefFparDef */
		    {
			ArrayList list = new13();
			push(goTo(8), list);
		    }
		    break;
                    case 14: /* reduce AByVallFparDef */
		    {
			ArrayList list = new14();
			push(goTo(8), list);
		    }
		    break;
                    case 15: /* reduce AVarDefVarDef */
		    {
			ArrayList list = new15();
			push(goTo(9), list);
		    }
		    break;
                    case 16: /* reduce AMultiIdList */
		    {
			ArrayList list = new16();
			push(goTo(10), list);
		    }
		    break;
                    case 17: /* reduce ASingleIdList */
		    {
			ArrayList list = new17();
			push(goTo(10), list);
		    }
		    break;
                    case 18: /* reduce AAfpartypefpartype1FparType */
		    {
			ArrayList list = new18();
			push(goTo(11), list);
		    }
		    break;
                    case 19: /* reduce AAfpartypefpartype2FparType */
		    {
			ArrayList list = new19();
			push(goTo(11), list);
		    }
		    break;
                    case 20: /* reduce ATypeType */
		    {
			ArrayList list = new20();
			push(goTo(12), list);
		    }
		    break;
                    case 21: /* reduce ARetDataRetType */
		    {
			ArrayList list = new21();
			push(goTo(13), list);
		    }
		    break;
                    case 22: /* reduce ARetNothRetType */
		    {
			ArrayList list = new22();
			push(goTo(13), list);
		    }
		    break;
                    case 23: /* reduce ATypeIntDataType */
		    {
			ArrayList list = new23();
			push(goTo(14), list);
		    }
		    break;
                    case 24: /* reduce ATypeCharDataType */
		    {
			ArrayList list = new24();
			push(goTo(14), list);
		    }
		    break;
                    case 25: /* reduce AMatchedStmt */
		    {
			ArrayList list = new25();
			push(goTo(15), list);
		    }
		    break;
                    case 26: /* reduce AUnmatchedStmt */
		    {
			ArrayList list = new26();
			push(goTo(15), list);
		    }
		    break;
                    case 27: /* reduce AIfMatched */
		    {
			ArrayList list = new27();
			push(goTo(16), list);
		    }
		    break;
                    case 28: /* reduce AWhileMatched */
		    {
			ArrayList list = new28();
			push(goTo(16), list);
		    }
		    break;
                    case 29: /* reduce ANoopMatched */
		    {
			ArrayList list = new29();
			push(goTo(16), list);
		    }
		    break;
                    case 30: /* reduce AAssignMatched */
		    {
			ArrayList list = new30();
			push(goTo(16), list);
		    }
		    break;
                    case 31: /* reduce ABlockMatched */
		    {
			ArrayList list = new31();
			push(goTo(16), list);
		    }
		    break;
                    case 32: /* reduce AFuncCallMatched */
		    {
			ArrayList list = new32();
			push(goTo(16), list);
		    }
		    break;
                    case 33: /* reduce AAreturnmatched1Matched */
		    {
			ArrayList list = new33();
			push(goTo(16), list);
		    }
		    break;
                    case 34: /* reduce AAreturnmatched2Matched */
		    {
			ArrayList list = new34();
			push(goTo(16), list);
		    }
		    break;
                    case 35: /* reduce AIfUnmatched */
		    {
			ArrayList list = new35();
			push(goTo(17), list);
		    }
		    break;
                    case 36: /* reduce AWhileUnmatched */
		    {
			ArrayList list = new36();
			push(goTo(17), list);
		    }
		    break;
                    case 37: /* reduce AMatchedIf */
		    {
			ArrayList list = new37();
			push(goTo(18), list);
		    }
		    break;
                    case 38: /* reduce ANoElseUnmatchedIf */
		    {
			ArrayList list = new38();
			push(goTo(19), list);
		    }
		    break;
                    case 39: /* reduce AWithElseUnmatchedIf */
		    {
			ArrayList list = new39();
			push(goTo(19), list);
		    }
		    break;
                    case 40: /* reduce AMatchedWhile */
		    {
			ArrayList list = new40();
			push(goTo(20), list);
		    }
		    break;
                    case 41: /* reduce AUnmatchedWhile */
		    {
			ArrayList list = new41();
			push(goTo(21), list);
		    }
		    break;
                    case 42: /* reduce ABlock */
		    {
			ArrayList list = new42();
			push(goTo(22), list);
		    }
		    break;
                    case 43: /* reduce AAblockstmtlist1BlockStmtList */
		    {
			ArrayList list = new43();
			push(goTo(23), list);
		    }
		    break;
                    case 44: /* reduce AAblockstmtlist2BlockStmtList */
		    {
			ArrayList list = new44();
			push(goTo(23), list);
		    }
		    break;
                    case 45: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new45();
			push(goTo(24), list);
		    }
		    break;
                    case 46: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new46();
			push(goTo(24), list);
		    }
		    break;
                    case 47: /* reduce AAmultiexprlist1ExprList */
		    {
			ArrayList list = new47();
			push(goTo(25), list);
		    }
		    break;
                    case 48: /* reduce AAmultiexprlist2ExprList */
		    {
			ArrayList list = new48();
			push(goTo(25), list);
		    }
		    break;
                    case 49: /* reduce AExprListTail */
		    {
			ArrayList list = new49();
			push(goTo(26), list);
		    }
		    break;
                    case 50: /* reduce AAarraydeclarraydeclarator1ArrayDeclarator */
		    {
			ArrayList list = new50();
			push(goTo(27), list);
		    }
		    break;
                    case 51: /* reduce AAarraydeclarraydeclarator2ArrayDeclarator */
		    {
			ArrayList list = new51();
			push(goTo(27), list);
		    }
		    break;
                    case 52: /* reduce ANoArrayDeclArrayDeclarator */
		    {
			ArrayList list = new52();
			push(goTo(27), list);
		    }
		    break;
                    case 53: /* reduce AMultipleArrayDeclaratorTail */
		    {
			ArrayList list = new53();
			push(goTo(28), list);
		    }
		    break;
                    case 54: /* reduce AEmptyArrayDeclEmptyArrayDeclarator */
		    {
			ArrayList list = new54();
			push(goTo(29), list);
		    }
		    break;
                    case 55: /* reduce AIdLValue */
		    {
			ArrayList list = new55();
			push(goTo(30), list);
		    }
		    break;
                    case 56: /* reduce AStrLValue */
		    {
			ArrayList list = new56();
			push(goTo(30), list);
		    }
		    break;
                    case 57: /* reduce AExprLValue */
		    {
			ArrayList list = new57();
			push(goTo(30), list);
		    }
		    break;
                    case 58: /* reduce AAddExpr */
		    {
			ArrayList list = new58();
			push(goTo(31), list);
		    }
		    break;
                    case 59: /* reduce ASubExpr */
		    {
			ArrayList list = new59();
			push(goTo(31), list);
		    }
		    break;
                    case 60: /* reduce ATermExpr */
		    {
			ArrayList list = new60();
			push(goTo(31), list);
		    }
		    break;
                    case 61: /* reduce AMultTerm */
		    {
			ArrayList list = new61();
			push(goTo(32), list);
		    }
		    break;
                    case 62: /* reduce ADivTerm */
		    {
			ArrayList list = new62();
			push(goTo(32), list);
		    }
		    break;
                    case 63: /* reduce AModTerm */
		    {
			ArrayList list = new63();
			push(goTo(32), list);
		    }
		    break;
                    case 64: /* reduce ASFactorTerm */
		    {
			ArrayList list = new64();
			push(goTo(32), list);
		    }
		    break;
                    case 65: /* reduce APosSignedFactor */
		    {
			ArrayList list = new65();
			push(goTo(33), list);
		    }
		    break;
                    case 66: /* reduce ANegSignedFactor */
		    {
			ArrayList list = new66();
			push(goTo(33), list);
		    }
		    break;
                    case 67: /* reduce AFactorSignedFactor */
		    {
			ArrayList list = new67();
			push(goTo(33), list);
		    }
		    break;
                    case 68: /* reduce AIntFactor */
		    {
			ArrayList list = new68();
			push(goTo(34), list);
		    }
		    break;
                    case 69: /* reduce ACharFactor */
		    {
			ArrayList list = new69();
			push(goTo(34), list);
		    }
		    break;
                    case 70: /* reduce ALvalFactor */
		    {
			ArrayList list = new70();
			push(goTo(34), list);
		    }
		    break;
                    case 71: /* reduce AFuncFactor */
		    {
			ArrayList list = new71();
			push(goTo(34), list);
		    }
		    break;
                    case 72: /* reduce AParensFactor */
		    {
			ArrayList list = new72();
			push(goTo(34), list);
		    }
		    break;
                    case 73: /* reduce AOrCond */
		    {
			ArrayList list = new73();
			push(goTo(35), list);
		    }
		    break;
                    case 74: /* reduce ACond1Cond */
		    {
			ArrayList list = new74();
			push(goTo(35), list);
		    }
		    break;
                    case 75: /* reduce AAndCond1 */
		    {
			ArrayList list = new75();
			push(goTo(36), list);
		    }
		    break;
                    case 76: /* reduce ACond2Cond1 */
		    {
			ArrayList list = new76();
			push(goTo(36), list);
		    }
		    break;
                    case 77: /* reduce ANotCond2 */
		    {
			ArrayList list = new77();
			push(goTo(37), list);
		    }
		    break;
                    case 78: /* reduce ACond3Cond2 */
		    {
			ArrayList list = new78();
			push(goTo(37), list);
		    }
		    break;
                    case 79: /* reduce AExprCmpCond3 */
		    {
			ArrayList list = new79();
			push(goTo(38), list);
		    }
		    break;
                    case 80: /* reduce ABoolCond3 */
		    {
			ArrayList list = new80();
			push(goTo(38), list);
		    }
		    break;
                    case 81: /* reduce ATrueBool */
		    {
			ArrayList list = new81();
			push(goTo(39), list);
		    }
		    break;
                    case 82: /* reduce AFalseBool */
		    {
			ArrayList list = new82();
			push(goTo(39), list);
		    }
		    break;
                    case 83: /* reduce ACParensBool */
		    {
			ArrayList list = new83();
			push(goTo(39), list);
		    }
		    break;
                    case 84: /* reduce AEqCmpOp */
		    {
			ArrayList list = new84();
			push(goTo(40), list);
		    }
		    break;
                    case 85: /* reduce ANeqCmpOp */
		    {
			ArrayList list = new85();
			push(goTo(40), list);
		    }
		    break;
                    case 86: /* reduce ALtCmpOp */
		    {
			ArrayList list = new86();
			push(goTo(40), list);
		    }
		    break;
                    case 87: /* reduce AGtCmpOp */
		    {
			ArrayList list = new87();
			push(goTo(40), list);
		    }
		    break;
                    case 88: /* reduce ALeqCmpOp */
		    {
			ArrayList list = new88();
			push(goTo(40), list);
		    }
		    break;
                    case 89: /* reduce AGeqCmpOp */
		    {
			ArrayList list = new89();
			push(goTo(40), list);
		    }
		    break;
                    case 90: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new90();
			push(goTo(41), list);
		    }
		    break;
                    case 91: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new91();
			push(goTo(41), list);
		    }
		    break;
                    case 92: /* reduce ATerminal$FparListTail */
		    {
			ArrayList list = new92();
			push(goTo(42), list);
		    }
		    break;
                    case 93: /* reduce ANonTerminal$FparListTail */
		    {
			ArrayList list = new93();
			push(goTo(42), list);
		    }
		    break;
                    case 94: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new94();
			push(goTo(43), list);
		    }
		    break;
                    case 95: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new95();
			push(goTo(43), list);
		    }
		    break;
                    case 96: /* reduce ATerminal$ExprListTail */
		    {
			ArrayList list = new96();
			push(goTo(44), list);
		    }
		    break;
                    case 97: /* reduce ANonTerminal$ExprListTail */
		    {
			ArrayList list = new97();
			push(goTo(44), list);
		    }
		    break;
                    case 98: /* reduce ATerminal$ArrayDeclaratorTail */
		    {
			ArrayList list = new98();
			push(goTo(45), list);
		    }
		    break;
                    case 99: /* reduce ANonTerminal$ArrayDeclaratorTail */
		    {
			ArrayList list = new99();
			push(goTo(45), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AFuncDefProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AFuncDefFuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        TId tidNode2;
        PFparList pfparlistNode3;
        PDataType pdatatypeNode4;
        PLocalDefList plocaldeflistNode5;
        PStmt pstmtNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pfparlistNode3 = (PFparList)nodeArrayList1.get(1);
        pdatatypeNode4 = (PDataType)nodeArrayList1.get(2);
        plocaldeflistNode5 = (PLocalDefList)nodeArrayList2.get(0);
        pstmtNode6 = (PStmt)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(tidNode2, pfparlistNode3, pdatatypeNode4, plocaldeflistNode5, pstmtNode6);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AFuncDeclFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDec pfuncdecNode1;
        {
            // Block
        TId tidNode2;
        PFparList pfparlistNode3;
        PDataType pdatatypeNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pfparlistNode3 = (PFparList)nodeArrayList1.get(1);
        pdatatypeNode4 = (PDataType)nodeArrayList1.get(2);

        pfuncdecNode1 = new AFuncDec(tidNode2, pfparlistNode3, pdatatypeNode4);
        }
	nodeList.add(pfuncdecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ANonEmptyLocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDefList plocaldeflistNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        plocaldeflistNode1 = new AExistingLocalDefList(listNode3);
        }
	nodeList.add(plocaldeflistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AEmptyLocalDefList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PLocalDefList plocaldeflistNode1;
        {
            // Block

        plocaldeflistNode1 = new ANonExistingLocalDefList();
        }
	nodeList.add(plocaldeflistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AInnerDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDec pfuncdecNode2;
        pfuncdecNode2 = (PFuncDec)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDecLocalDef(pfuncdecNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AInnerDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AInnerVarsLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarDefLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AHeaderHeader */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        PFparList pfparlistNode2;
        PDataType pdatatypeNode3;
        tidNode1 = (TId)nodeArrayList2.get(0);
        pfparlistNode2 = (PFparList)nodeArrayList4.get(0);
        pdatatypeNode3 = (PDataType)nodeArrayList7.get(0);
	nodeList.add(tidNode1);
	nodeList.add(pfparlistNode2);
	nodeList.add(pdatatypeNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAmultifparfparlist1FparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparList pfparlistNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PFparDef pfpardefNode2;
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
	if(pfpardefNode2 != null)
	{
	  listNode3.add(pfpardefNode2);
	}
        }

        pfparlistNode1 = new AExistingFparList(listNode3);
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAmultifparfparlist2FparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparList pfparlistNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode3 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pfpardefNode2 != null)
	{
	  listNode4.add(pfpardefNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfparlistNode1 = new AExistingFparList(listNode4);
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AEmptyFparList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PFparList pfparlistNode1;
        {
            // Block

        pfparlistNode1 = new ANonExistingFparList();
        }
	nodeList.add(pfparlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AFparListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        pfpardefNode1 = (PFparDef)nodeArrayList2.get(0);
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AByRefFparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        TKwRef tkwrefNode5;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        tkwrefNode5 = (TKwRef)nodeArrayList1.get(0);

        pfpardefNode1 = new AByRefFparDef(listNode3, ptypeNode4, tkwrefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AByVallFparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pfpardefNode1 = new AByValFparDef(listNode3, ptypeNode4);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AVarDefVarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);

        pvardefNode1 = new AVarDef(listNode3, ptypeNode4);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AMultiIdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TId tidNode1;
        LinkedList listNode2 = new LinkedList();
        tidNode1 = (TId)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidNode1 != null)
	{
	  listNode3.add(tidNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ASingleIdList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAfpartypefpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayDec parraydecNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydecNode3 = (PArrayDec)nodeArrayList2.get(0);

        ptypeNode1 = new AType(pdatatypeNode2, parraydecNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAfpartypefpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayDec parraydecNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydecNode3 = (PArrayDec)nodeArrayList3.get(0);

        ptypeNode1 = new AType(pdatatypeNode2, parraydecNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ATypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayDec parraydecNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraydecNode3 = (PArrayDec)nodeArrayList2.get(0);

        ptypeNode1 = new AType(pdatatypeNode2, parraydecNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ARetDataRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        pdatatypeNode1 = (PDataType)nodeArrayList1.get(0);
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce ARetNothRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwNothing tkwnothingNode2;
        tkwnothingNode2 = (TKwNothing)nodeArrayList1.get(0);

        pdatatypeNode1 = new ANothDataType(tkwnothingNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ATypeIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tkwintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ATypeCharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKwChar tkwcharNode2;
        tkwcharNode2 = (TKwChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tkwcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AMatchedStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AUnmatchedStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIfMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AWhileMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ANoopMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new ANoopStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAssignMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignStmt(plvalueNode2, pexprNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ABlockMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AFuncCallMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstmtNode1 = new AFuncCallStmt(pfunccallNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAreturnmatched1Matched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstmtNode1 = new AReturnStmt(null);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAreturnmatched2Matched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pstmtNode1 = new AReturnStmt(pexprNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AIfUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AWhileUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AMatchedIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        PStmt pstmtNode4;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
        pstmtNode4 = (PStmt)nodeArrayList6.get(0);

        pstmtNode1 = new AIfStmt(pcondNode2, pstmtNode3, pstmtNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ANoElseUnmatchedIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AIfStmt(pcondNode2, pstmtNode3, null);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AWithElseUnmatchedIf */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        PStmt pstmtNode4;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
        pstmtNode4 = (PStmt)nodeArrayList6.get(0);

        pstmtNode1 = new AIfStmt(pcondNode2, pstmtNode3, pstmtNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AMatchedWhile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(pcondNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AUnmatchedWhile */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(pcondNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ABlock */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtNode1 = new ABlockStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAblockstmtlist1BlockStmtList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAblockstmtlist2BlockStmtList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunccallNode1 = new AFuncCall(tidNode2, listNode3);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunccallNode1 = new AFuncCall(tidNode2, listNode4);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAmultiexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAmultiexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        LinkedList listNode2 = new LinkedList();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAarraydeclarraydeclarator1ArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDec parraydecNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);
	if(tintconstNode2 != null)
	{
	  listNode3.add(tintconstNode2);
	}
        }

        parraydecNode1 = new AExistingArrayDec(listNode3);
        }
	nodeList.add(parraydecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAarraydeclarraydeclarator2ArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayDec parraydecNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        TIntConst tintconstNode2;
        LinkedList listNode3 = new LinkedList();
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(tintconstNode2 != null)
	{
	  listNode4.add(tintconstNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parraydecNode1 = new AExistingArrayDec(listNode4);
        }
	nodeList.add(parraydecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ANoArrayDeclArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PArrayDec parraydecNode1;
        {
            // Block

        parraydecNode1 = new ANotExistingArrayDec();
        }
	nodeList.add(parraydecNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AMultipleArrayDeclaratorTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TIntConst tintconstNode1;
        tintconstNode1 = (TIntConst)nodeArrayList2.get(0);
	nodeList.add(tintconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AEmptyArrayDeclEmptyArrayDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLvalue(tidNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AStrLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new AStrLvalue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AExprLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        PLvalue plvalueNode2;
        TLBracket tlbracketNode3;
        PExpr pexprNode4;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        plvalueNode1 = new AArrayLvalue(plvalueNode2, tlbracketNode3, pexprNode4);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, tplusNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ASubExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, tminusNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMult tmultNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, tmultNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TKwDiv tkwdivNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tkwdivNode3 = (TKwDiv)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, tkwdivNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TKwMod tkwmodNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tkwmodNode3 = (TKwMod)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, tkwmodNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ASFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce APosSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TPlus tplusNode2;
        PExpr pexprNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new APosExpr(tplusNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ANegSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TMinus tminusNode2;
        PExpr pexprNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANegExpr(tminusNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AFactorSignedFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AIntFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pexprNode1 = new AIntExpr(tintconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ACharFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pexprNode1 = new ACharExpr(tcharconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ALvalFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLvalue plvalueNode2;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);

        pexprNode1 = new ALvalExpr(plvalueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AFuncFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pexprNode1 = new AFuncExpr(pfunccallNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AParensFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AOrCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TKwOr tkworNode3;
        PCond pcondNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        tkworNode3 = (TKwOr)nodeArrayList2.get(0);
        pcondNode4 = (PCond)nodeArrayList3.get(0);

        pcondNode1 = new AOrCond(pcondNode2, tkworNode3, pcondNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ACond1Cond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAndCond1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TKwAnd tkwandNode3;
        PCond pcondNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        tkwandNode3 = (TKwAnd)nodeArrayList2.get(0);
        pcondNode4 = (PCond)nodeArrayList3.get(0);

        pcondNode1 = new AAndCond(pcondNode2, tkwandNode3, pcondNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ACond2Cond1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ANotCond2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TKwNot tkwnotNode2;
        PCond pcondNode3;
        tkwnotNode2 = (TKwNot)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);

        pcondNode1 = new ANotCond(tkwnotNode2, pcondNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ACond3Cond2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AExprCmpCond3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PCmpOp pcmpopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pcmpopNode3 = (PCmpOp)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pcondNode1 = new AExprCmpCond(pexprNode2, pcmpopNode3, pexprNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ABoolCond3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ATrueBool */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pcondNode1 = new ATrueCond(ttrueNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AFalseBool */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pcondNode1 = new AFalseCond(tfalseNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ACParensBool */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AEqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pcmpopNode1 = new AEqCmpOp(teqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ANeqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        pcmpopNode1 = new ANeqCmpOp(tneqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ALtCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcmpopNode1 = new ALtCmpOp(tltNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AGtCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcmpopNode1 = new AGtCmpOp(tgtNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce ALeqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TLteq tlteqNode2;
        tlteqNode2 = (TLteq)nodeArrayList1.get(0);

        pcmpopNode1 = new ALeqCmpOp(tlteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AGeqCmpOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCmpOp pcmpopNode1;
        {
            // Block
        TGteq tgteqNode2;
        tgteqNode2 = (TGteq)nodeArrayList1.get(0);

        pcmpopNode1 = new AGeqCmpOp(tgteqNode2);
        }
	nodeList.add(pcmpopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ATerminal$FparListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparDef pfpardefNode1;
        pfpardefNode1 = (PFparDef)nodeArrayList1.get(0);
	if(pfpardefNode1 != null)
	{
	  listNode2.add(pfpardefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ANonTerminal$FparListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFparDef pfpardefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpardefNode2 = (PFparDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpardefNode2 != null)
	{
	  listNode3.add(pfpardefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ATerminal$ExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ANonTerminal$ExprListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ATerminal$ArrayDeclaratorTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIntConst tintconstNode1;
        tintconstNode1 = (TIntConst)nodeArrayList1.get(0);
	if(tintconstNode1 != null)
	{
	  listNode2.add(tintconstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ANonTerminal$ArrayDeclaratorTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIntConst tintconstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tintconstNode2 != null)
	{
	  listNode3.add(tintconstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {32, SHIFT, 1}, },
			{{-1, ERROR, 1}, {41, SHIFT, 5}, },
			{{-1, ERROR, 2}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 4}, {25, SHIFT, 6}, {32, SHIFT, 1}, },
			{{-1, ERROR, 5}, {0, SHIFT, 14}, },
			{{-1, ERROR, 6}, {41, SHIFT, 15}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 9}, {4, SHIFT, 17}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 4}, {7, SHIFT, 19}, {25, SHIFT, 6}, {32, SHIFT, 1}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 3}, {25, SHIFT, 6}, {32, SHIFT, 1}, },
			{{-1, REDUCE, 11}, {34, SHIFT, 21}, {41, SHIFT, 15}, },
			{{-1, REDUCE, 17}, {8, SHIFT, 25}, },
			{{-1, ERROR, 16}, {6, SHIFT, 26}, },
			{{-1, REDUCE, 43}, {4, SHIFT, 17}, {7, SHIFT, 27}, {28, SHIFT, 28}, {30, SHIFT, 29}, {33, SHIFT, 30}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 21}, {41, SHIFT, 15}, },
			{{-1, ERROR, 22}, {1, SHIFT, 46}, },
			{{-1, REDUCE, 9}, {7, SHIFT, 47}, },
			{{-1, ERROR, 24}, {6, SHIFT, 50}, },
			{{-1, ERROR, 25}, {41, SHIFT, 15}, },
			{{-1, ERROR, 26}, {21, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 28}, {0, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {27, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {39, SHIFT, 62}, {40, SHIFT, 63}, {41, SHIFT, 32}, },
			{{-1, ERROR, 29}, {0, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {27, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {39, SHIFT, 62}, {40, SHIFT, 63}, {41, SHIFT, 32}, },
			{{-1, ERROR, 30}, {0, SHIFT, 76}, {7, SHIFT, 77}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 79}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 41}, {5, SHIFT, 80}, },
			{{-1, ERROR, 42}, {7, SHIFT, 81}, },
			{{-1, ERROR, 43}, {2, SHIFT, 82}, {9, SHIFT, 83}, },
			{{-1, REDUCE, 44}, {4, SHIFT, 17}, {7, SHIFT, 27}, {28, SHIFT, 28}, {30, SHIFT, 29}, {33, SHIFT, 30}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 45}, {6, SHIFT, 85}, },
			{{-1, ERROR, 46}, {6, SHIFT, 86}, },
			{{-1, ERROR, 47}, {34, SHIFT, 21}, {41, SHIFT, 15}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 10}, {7, SHIFT, 47}, },
			{{-1, ERROR, 50}, {21, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 54}, {7, SHIFT, 91}, },
			{{-1, REDUCE, 52}, {2, SHIFT, 92}, },
			{{-1, ERROR, 56}, {0, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {27, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {39, SHIFT, 62}, {40, SHIFT, 63}, {41, SHIFT, 32}, },
			{{-1, ERROR, 57}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 58}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 59}, {0, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {39, SHIFT, 62}, {40, SHIFT, 63}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, {2, SHIFT, 82}, },
			{{-1, ERROR, 66}, {10, SHIFT, 99}, {11, SHIFT, 100}, {13, SHIFT, 101}, {14, SHIFT, 102}, {15, SHIFT, 103}, {16, SHIFT, 104}, {17, SHIFT, 105}, {18, SHIFT, 106}, },
			{{-1, REDUCE, 60}, {12, SHIFT, 108}, {24, SHIFT, 109}, {26, SHIFT, 110}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 70}, {20, SHIFT, 111}, {29, SHIFT, 112}, },
			{{-1, REDUCE, 74}, {19, SHIFT, 113}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 75}, {20, SHIFT, 111}, {22, SHIFT, 114}, },
			{{-1, ERROR, 76}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 78}, {7, SHIFT, 116}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, ERROR, 79}, {0, SHIFT, 76}, {1, SHIFT, 117}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 82}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 83}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 85}, {21, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, ERROR, 86}, {21, SHIFT, 52}, {23, SHIFT, 53}, {35, SHIFT, 123}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 52}, {2, SHIFT, 126}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 92}, {36, SHIFT, 129}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 94}, {1, SHIFT, 130}, {10, SHIFT, 99}, {11, SHIFT, 100}, {13, SHIFT, 101}, {14, SHIFT, 102}, {15, SHIFT, 103}, {16, SHIFT, 104}, {17, SHIFT, 105}, {18, SHIFT, 106}, },
			{{-1, ERROR, 95}, {1, SHIFT, 131}, {20, SHIFT, 111}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 99}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 100}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 107}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 108}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 109}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 110}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 111}, {0, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {27, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {39, SHIFT, 62}, {40, SHIFT, 63}, {41, SHIFT, 32}, },
			{{-1, ERROR, 112}, {4, SHIFT, 17}, {7, SHIFT, 27}, {28, SHIFT, 28}, {30, SHIFT, 29}, {33, SHIFT, 30}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 113}, {0, SHIFT, 56}, {10, SHIFT, 57}, {11, SHIFT, 58}, {27, SHIFT, 59}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {39, SHIFT, 62}, {40, SHIFT, 63}, {41, SHIFT, 32}, },
			{{-1, ERROR, 114}, {4, SHIFT, 17}, {7, SHIFT, 27}, {28, SHIFT, 28}, {30, SHIFT, 29}, {33, SHIFT, 30}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, ERROR, 115}, {1, SHIFT, 130}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 118}, {1, SHIFT, 144}, },
			{{-1, REDUCE, 47}, {8, SHIFT, 145}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, ERROR, 120}, {3, SHIFT, 148}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, ERROR, 121}, {7, SHIFT, 149}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 126}, {3, SHIFT, 150}, {36, SHIFT, 129}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 52}, {2, SHIFT, 92}, },
			{{-1, ERROR, 129}, {3, SHIFT, 152}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 58}, {12, SHIFT, 108}, {24, SHIFT, 109}, {26, SHIFT, 110}, },
			{{-1, REDUCE, 59}, {12, SHIFT, 108}, {24, SHIFT, 109}, {26, SHIFT, 110}, },
			{{-1, REDUCE, 79}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 73}, {19, SHIFT, 113}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 25}, {31, SHIFT, 153}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 145}, {0, SHIFT, 76}, {10, SHIFT, 57}, {11, SHIFT, 58}, {36, SHIFT, 60}, {37, SHIFT, 61}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 48}, {8, SHIFT, 145}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 50}, {2, SHIFT, 156}, },
			{{-1, ERROR, 153}, {4, SHIFT, 17}, {7, SHIFT, 27}, {28, SHIFT, 28}, {30, SHIFT, 29}, {33, SHIFT, 30}, {38, SHIFT, 31}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 49}, {10, SHIFT, 99}, {11, SHIFT, 100}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 156}, {36, SHIFT, 161}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 51}, {2, SHIFT, 156}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 161}, {3, SHIFT, 163}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 53}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, {0, 3}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 10}, {13, 20}, },
			{{-1, 11}, {0, 4}, },
			{{-1, 22}, },
			{{-1, 48}, {49, 88}, },
			{{-1, 23}, {47, 87}, },
			{{-1, 12}, },
			{{-1, 24}, {6, 16}, {21, 45}, {25, 51}, },
			{{-1, 89}, {85, 122}, },
			{{-1, 54}, },
			{{-1, 124}, },
			{{-1, 90}, {26, 55}, {86, 125}, },
			{{-1, 33}, {44, 84}, {114, 142}, },
			{{-1, 34}, {112, 139}, {114, 143}, {153, 159}, },
			{{-1, 35}, {112, 140}, {153, 160}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 40}, {9, 18}, },
			{{-1, 41}, },
			{{-1, 64}, {17, 42}, {44, 42}, {112, 42}, {114, 42}, {153, 42}, },
			{{-1, 118}, },
			{{-1, 146}, {147, 155}, },
			{{-1, 93}, {90, 127}, {128, 151}, },
			{{-1, 157}, {158, 162}, },
			{{-1, 128}, },
			{{-1, 65}, {17, 43}, {44, 43}, {112, 43}, {114, 43}, {153, 43}, },
			{{-1, 66}, {30, 78}, {56, 94}, {76, 115}, {79, 119}, {82, 120}, {83, 121}, {107, 134}, {145, 154}, },
			{{-1, 67}, {99, 132}, {100, 133}, },
			{{-1, 68}, {57, 96}, {58, 97}, {108, 135}, {109, 136}, {110, 137}, },
			{{-1, 69}, },
			{{-1, 70}, {29, 75}, {56, 95}, },
			{{-1, 71}, {111, 138}, },
			{{-1, 72}, {113, 141}, },
			{{-1, 73}, {59, 98}, },
			{{-1, 74}, },
			{{-1, 107}, },
			{{-1, 13}, },
			{{-1, 49}, },
			{{-1, 44}, },
			{{-1, 147}, },
			{{-1, 158}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '{', 'var', 'fun'",
			"expecting: '('",
			"expecting: '{'",
			"expecting: '{', ';', 'var', 'fun'",
			"expecting: ')', 'ref', id",
			"expecting: ':', ','",
			"expecting: ':'",
			"expecting: '{', '}', ';', 'while', 'if', 'return', string literal, id",
			"expecting: '{', 'var', 'fun', EOF",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'int', 'char'",
			"expecting: '{', '}', ';', 'while', 'if', 'else', 'return', string literal, id",
			"expecting: '(', '+', '-', 'not', int const, char const, string literal, 'TRUE', 'FALSE', id",
			"expecting: '(', ';', '+', '-', int const, char const, string literal, id",
			"expecting: ')', '[', ']', ';', ',', '<-', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: '(', ')', '[', ']', ';', ',', '<-', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: '}'",
			"expecting: ';'",
			"expecting: '[', '<-'",
			"expecting: 'ref', id",
			"expecting: ')', '[', '{', ';', 'var', 'fun'",
			"expecting: '[', ';'",
			"expecting: '(', '+', '-', int const, char const, string literal, id",
			"expecting: '(', '+', '-', int const, char const, string literal, 'TRUE', 'FALSE', id",
			"expecting: ')', ']', ';', ',', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: ')', 'and', 'or', 'then', 'do'",
			"expecting: ')', '[', ']', ';', ',', '+', '-', '*', '=', '#', '<', '>', '<=', '>=', 'and', 'or', 'then', 'mod', 'div', 'do'",
			"expecting: '+', '-', '=', '#', '<', '>', '<=', '>='",
			"expecting: 'or', 'do'",
			"expecting: 'or', 'then'",
			"expecting: ';', '+', '-'",
			"expecting: '(', ')', '+', '-', int const, char const, string literal, id",
			"expecting: '{', '}', ';', 'var', 'while', 'if', 'else', 'fun', 'return', string literal, id, EOF",
			"expecting: 'int', 'char', 'nothing'",
			"expecting: ')', '[', ';'",
			"expecting: int const",
			"expecting: ')', '+', '-', '=', '#', '<', '>', '<=', '>='",
			"expecting: ')', 'or'",
			"expecting: '{', ';', 'while', 'if', 'return', string literal, id",
			"expecting: ')', '+', '-'",
			"expecting: ')', ',', '+', '-'",
			"expecting: ']', '+', '-'",
			"expecting: ']', int const",
			"expecting: ']'",
			"expecting: ')', '+', '-', 'and', 'or', 'then', 'do'",
			"expecting: ')', ','",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 3, 3, 5, 3, 6, 3, 3, 7, 8, 9, 10, 11, 3, 3, 1, 12, 13, 9, 1, 14, 15, 16, 16, 17, 18, 19, 10, 10, 10, 15, 10, 15, 10, 15, 20, 21, 22, 10, 9, 9, 23, 13, 13, 14, 9, 24, 24, 21, 25, 16, 26, 26, 27, 28, 28, 29, 29, 28, 30, 31, 28, 28, 28, 32, 29, 29, 29, 29, 33, 26, 15, 34, 35, 36, 15, 26, 26, 10, 14, 37, 13, 13, 13, 38, 3, 39, 21, 40, 41, 28, 28, 29, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 16, 42, 16, 42, 43, 15, 28, 12, 44, 45, 34, 13, 6, 6, 6, 46, 13, 38, 47, 28, 29, 28, 28, 48, 28, 28, 28, 29, 15, 10, 29, 10, 15, 28, 26, 49, 49, 18, 15, 38, 13, 38, 42, 44, 49, 39, 38, 38, 15, 10, 47, 38, 38, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

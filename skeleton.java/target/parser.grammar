Package compiler;

Helpers

    all         = [0 .. 127];
    sp          = ' ';
    tab         = 9;
    lf          = 10;
    ff          = 12;
    cr          = 13; 
    eol         = lf | cr | cr lf;
    not_eol     = [all - [cr + lf]];
    white_space = (sp | tab | ff | eol)*;
    
    underscore    = '_';
    letter        = [['a' .. 'z'] + ['A' .. 'Z']];
    digit         = ['0' .. '9'];
    hex_digit     = [digit + [['a' .. 'f'] + ['A' .. 'F']]];

    simple_escape_sequence = '\' ''' | '\"' | '\\' | '\n' | '\r' | '\t' | '\0';
    hex_escape_sequence    = '\x' hex_digit hex_digit;
    escape_sequence        = simple_escape_sequence | hex_escape_sequence;
    c_char                 = [all - [''' + ['"' + ['\' + [cr + lf]]]]] | escape_sequence;
    s_char                 = [all - ['"' + ['\' + [cr + lf]]]] | escape_sequence;
    
    not_dollar = [all - '$'];
  
Tokens

    white_space = white_space;
    
    /* Comments */
    comment = ('$' not_dollar not_eol* eol |
               '$$' '$'* ((not_dollar+ '$'? not_dollar+) | (not_dollar*))* '$$');
    
    l_par     = '(';
    r_par     = ')';
    l_bracket = '[';
    r_bracket = ']';
    l_brace   = '{';
    r_brace   = '}';
    colon     = ':';
    semicolon = ';';
    comma     = ',';
    arrow     = '<-';
    plus      = '+';
    minus     = '-';
    mult      = '*';
    eq        = '=';
    neq       = '#';
    lt        = '<';
    gt        = '>';
    lteq      = '<=';
    gteq      = '>=';

    /* Keywords */
    kw_and     = 'and';
    kw_or      = 'or';
    kw_int     = 'int';
    kw_then    = 'then';
    kw_char    = 'char';
    kw_mod     = 'mod';
    kw_var     = 'var';
    kw_div     = 'div';
    kw_not     = 'not';
    kw_while   = 'while';
    kw_do      = 'do';
    kw_if      = 'if';
    kw_else    = 'else';
    kw_fun     = 'fun';
    kw_return  = 'return';
    kw_ref     = 'ref';
    kw_nothing = 'nothing';

    /* Constants */
    int_const      = digit+;
    char_const     = ''' c_char? ''';
    string_literal = '"' s_char* '"';

    /* Identifiers */
    id = letter (letter | digit | underscore)*;
    
Ignored Tokens
    comment,
    white_space;

Productions

    program = {one} expr;
        /*{one} func_def+;*/
    
    func_def =
        {simple} header local_def* block;

    func_decl =
        header semicolon;

    local_def =
        {inner_decl} func_decl |
        {inner_def}  func_def |
        {inner_vars} var_def;

    header = 
        {func_header} kw_fun id l_par fpar_list? r_par colon ret_type;

    fpar_list =
        {multi}  fpar_def semicolon fpar_list |
        {single} fpar_def;

    /* NOTE: Tables are passed by ref only */
    fpar_def =
        {by_val} id_list colon data_type |
        {by_ref} kw_ref id_list colon fpar_type;

    var_def =
        {var_def} kw_var id_list colon type semicolon;

    id_list =
        {multi_set}  id comma id_list |
        {single_set} id; 

    fpar_type =
        {type} data_type empty_array_declarator? array_declarator;

    type =
        {simple} data_type array_declarator;

    ret_type =
        {ret_data} data_type |
        {ret_noth} kw_nothing;

    data_type =
        {t_int}  kw_int |
        {t_char} kw_char;

    stmt =
        {empty} semicolon;

    block =
        {one} l_brace stmt* r_brace;

    array_declarator =
        {array_decl} l_bracket int_const r_bracket array_declarator |
        {empty_decl} ;

    empty_array_declarator =
        {empty_array_decl} l_bracket r_bracket;

    l_value =
        {lval_id}   id |
        {lval_str}  string_literal |
        {lval_expr} l_value l_bracket expr r_bracket;

    expr =
        {add}  expr plus term |
        {sub}  expr minus term |
        {term} term;

    term =
        {mult}     term mult signed_factor |
        {div}      term kw_div signed_factor |
        {mod}      term kw_mod signed_factor |
        {s_factor} signed_factor;

    signed_factor =
        {pos}    plus signed_factor |
        {neg}    minus signed_factor |
        {factor} factor;

    factor =
        {f_int}    int_const |
        /*{f_char}   char_const |
        {f_lval}   l_value |
        {f_func}   func_call |*/
        {f_parens} l_par expr r_par;
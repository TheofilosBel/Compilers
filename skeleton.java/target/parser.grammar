Package compiler;

Helpers

    all         = [0 .. 127];
    sp          = ' ';
    tab         = 9;
    lf          = 10;
    ff          = 12;
    cr          = 13; 
    eol         = lf | cr | cr lf;
    not_eol     = [all - [cr + lf]];
    white_space = (sp | tab | ff | eol)*;
    
    underscore    = '_';
    letter        = [['a' .. 'z'] + ['A' .. 'Z']];
    digit         = ['0' .. '9'];
    nonzero_digit = ['1' .. '9'];
    octal_digit   = ['0' .. '7'];
    hex_digit     = [digit + [['a' .. 'f'] + ['A' .. 'F']]];
    namepart      = (letter | digit)*;

    /* Constants */
    decimal_const = nonzero_digit digit*;
    octal_const   = '0' octal_digit*;
    hex_const     = '0' ('x' | 'X') hex_digit*;
    
    /* Comments */
    not_dollar        = [all - '$'];
    not_double_dollar = not_dollar not_dollar;
  
Tokens

    white_space = white_space;
    
    /* Comments */
    comment = ('$' not_dollar not_eol* eol |
               '$$' ((not_dollar+ '$'? not_dollar+) | (not_dollar*))* '$$');
    
    l_par     = '(';
    r_par     = ')';
    l_bracket = '[';
    r_bracket = ']';
    l_brace   = '{';
    r_brace   = '}';
    colon     = ':';
    semicolon = ';';
    comma     = ',';
    plus      = '+';
    minus     = '-';
    mult      = '*';
    
    /* Keywords */
    kw_and     = 'and';
    kw_or      = 'or';
    kw_int     = 'int';
    kw_then    = 'then';
    kw_char    = 'char';
    kw_mod     = 'mod';
    kw_var     = 'var';
    kw_div     = 'div';
    kw_not     = 'not';
    kw_while   = 'while';
    kw_do      = 'do';
    kw_if      = 'if';
    kw_else    = 'else';
    kw_fun     = 'fun';
    kw_return  = 'return';
    kw_ref     = 'ref';
    kw_nothing = 'nothing';

    /* Constants */
    int_const = decimal_const | octal_const | hex_const;

    /* Identifiers */
    id = letter+ ((underscore namepart) | namepart)*;
    /*array_declaration = (l_bracket digit* r_bracket)+;*/
    
Ignored Tokens
    comment,
    white_space;

Productions

    program =
        {one} var_def+;
    
    var_def = 
        {var_def} kw_var set_of_ids colon type semicolon;
        
    set_of_ids =
        {multi_set}  id comma set_of_ids |
        {single_set} id;

    type = 
        {simple} data_type array_declarator;

    ret_type =
        {t_ret} data_type | kw_nothing;

    data_type = 
        {t_int}  kw_int |
        {t_char} kw_char;

    array_declarator =
        {array_decl} array_declarator l_bracket int_const r_bracket |
        {empty_decl} ;

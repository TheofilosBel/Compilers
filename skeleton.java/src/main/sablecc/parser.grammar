Package compiler;

Helpers

    all         = [0 .. 127];
    sp          = ' ';
    tab         = 9;
    lf          = 10;
    ff          = 12;
    cr          = 13; 
    eol         = lf | cr | cr lf;
    not_eol     = [all - [cr + lf]];
    white_space = (sp | tab | ff | eol)*;
    
    underscore    = '_';
    letter        = [['a' .. 'z'] + ['A' .. 'Z']];
    digit         = ['0' .. '9'];
    nonzero_digit = ['1' .. '9'];
    hex_digit     = [digit + [['a' .. 'f'] + ['A' .. 'F']]];

    simple_escape_sequence = '\' ''' | '\"' | '\\' | '\n' | '\r' | '\t' | '\0';
    hex_escape_sequence    = '\x' hex_digit hex_digit;
    escape_sequence        = simple_escape_sequence | hex_escape_sequence;
    character              = [all - [''' + ['"' + ['\' + [cr + lf]]]]] | escape_sequence;
    
    /* Comments */
    not_dollar = [all - '$'];
  
Tokens

    white_space = white_space;
    
    /* Comments */
    comment = ('$' not_dollar not_eol* eol |
               '$$' '$'* ((not_dollar+ '$'? not_dollar+) | (not_dollar*))* '$$');
    
    l_par     = '(';
    r_par     = ')';
    l_bracket = '[';
    r_bracket = ']';
    l_brace   = '{';
    r_brace   = '}';
    colon     = ':';
    semicolon = ';';
    comma     = ',';
    arrow     = '<-';
    plus      = '+';
    minus     = '-';
    mult      = '*';
    eq        = '=';
    neq       = '#';
    lt        = '<';
    gt        = '>';
    lteq      = '<=';
    gteq      = '>=';

    /* Keywords */
    kw_and     = 'and';
    kw_or      = 'or';
    kw_int     = 'int';
    kw_then    = 'then';
    kw_char    = 'char';
    kw_mod     = 'mod';
    kw_var     = 'var';
    kw_div     = 'div';
    kw_not     = 'not';
    kw_while   = 'while';
    kw_do      = 'do';
    kw_if      = 'if';
    kw_else    = 'else';
    kw_fun     = 'fun';
    kw_return  = 'return';
    kw_ref     = 'ref';
    kw_nothing = 'nothing';

    /* Constants */
    int_const = digit+;
    char_const = ''' character ''';

    /* Identifiers */
    id = letter (letter | digit | underscore)*;
    
Ignored Tokens
    comment,
    white_space;

Productions

/*
    program = {one} char_const*;
*/
    program =
        {one} var_def+ |
        {two} func_def+;
   
     
    func_def = 
    	{simple}	header local_def* block;
    	
    func_decl = 
    	header semicolon;
    	    	
    local_def =
    	{inner_decl}	func_decl |
    	{inner_def}		func_def  |
    	{vars}			var_def;
    	

    header = 
    	{func_header} kw_fun id l_par fargs_list r_par colon ret_type ;
    	
    fargs_list = 
    	{multi}		fargs_def semicolon fargs_list |
    	{single}	fargs_def |
    	{empty}		;
    	
    /* NOTE : Tables are passed by ref only */
    fargs_def = 
    	{by_val} 	set_of_ids colon data_type fargs_def |
    	{by_ref} 	kw_ref set_of_ids colon fpar_type fargs_def;
    	
    
    var_def = 
        {var_def} 	kw_var set_of_ids colon type semicolon;
        
    set_of_ids =
        {multi_set}  id comma set_of_ids |
        {single_set} id; 

	
	fpar_type =
		{type}		data_type array_declarator;
	
    type = 
        {simple} data_type array_declarator;

    ret_type =
        {t_ret} data_type | kw_nothing;

    data_type = 
        {t_int}  kw_int |
        {t_char} kw_char;
        
    stmnt = 
    	{empty} semicolon;
        
    block = 
    	{one} l_brace stmnt* r_brace;
        
    array_declarator =
        {array_decl} l_bracket int_const? r_bracket array_declarator |
        {empty_decl} ;

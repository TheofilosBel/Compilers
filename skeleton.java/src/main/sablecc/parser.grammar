Package compiler;

Helpers

	all         = [0 .. 127];
	sp          = ' ';
	tab         = 9;
	lf          = 10;
	ff          = 12;
	cr          = 13; 
	eol         = lf | cr | cr lf;
	not_eol     = [all - [cr + lf]];
	white_space = (sp | tab | ff | eol)*;
	
	underscore = '_';
	letter     = [['a' .. 'z'] + ['A' .. 'Z']];
	digit	   = ['0' .. '9'];
	namepart   = (letter | digit)*;
	
	/* Comments */
	not_dollar        = [all - '$'];
	not_double_dollar = not_dollar not_dollar;

	l_par 	  = '(';
	r_par 	  = ')';
	l_bracket = '[';
	r_bracket = ']';
	l_brace   = '{';
	r_brace   = '}';
  
Tokens

    white_space	= white_space;
    
    /* Comments */
    comment = ('$' not_dollar not_eol* eol);
    
	colon     = ':';
	semicolon = ';';
	comma     = ',';
    
    /* Keywords */
    kw_and	   = 'and';
    kw_or	   = 'or';
    kw_int	   = 'int';
    kw_then    = 'then';
    kw_char	   = 'char';
    kw_mod	   = 'mod';
    kw_var	   = 'var';
    kw_div	   = 'div';
    kw_not	   = 'not';
    kw_while   = 'while';
    kw_do      = 'do';
    kw_if	   = 'if';
    kw_else	   = 'else';
    kw_fun	   = 'fun';
    kw_return  = 'return';
    kw_ref	   = 'ref';
    kw_nothing = 'nothing';

    identifier = letter+ ((underscore namepart) | namepart)*;
    integer = digit+;
    array_declaration = (l_bracket digit* r_bracket)+;
    
Ignored Tokens
    comment,
    white_space;

Productions
 
	program =
        {one} variable_definition+;
	
	variable_definition = 
		{def} kw_var set_of_variables colon type semicolon;
		
	set_of_variables =
		{multi_set}  identifier comma set_of_variables |
		{single_set} identifier;

	type = 
		{simple} data_type |
		{array}  data_type array_declaration;

	data_type = 
		{t_int}  kw_int |
		{t_char} kw_char;
		
		
		
		
		
		
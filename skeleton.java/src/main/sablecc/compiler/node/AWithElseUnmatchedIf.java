/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AWithElseUnmatchedIf extends PUnmatchedIf
{
    private TKwIf _kwIf_;
    private PCond _cond_;
    private TKwThen _kwThen_;
    private PMatched _matched_;
    private TKwElse _kwElse_;
    private PUnmatched _unmatched_;

    public AWithElseUnmatchedIf()
    {
        // Constructor
    }

    public AWithElseUnmatchedIf(
        @SuppressWarnings("hiding") TKwIf _kwIf_,
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") TKwThen _kwThen_,
        @SuppressWarnings("hiding") PMatched _matched_,
        @SuppressWarnings("hiding") TKwElse _kwElse_,
        @SuppressWarnings("hiding") PUnmatched _unmatched_)
    {
        // Constructor
        setKwIf(_kwIf_);

        setCond(_cond_);

        setKwThen(_kwThen_);

        setMatched(_matched_);

        setKwElse(_kwElse_);

        setUnmatched(_unmatched_);

    }

    @Override
    public Object clone()
    {
        return new AWithElseUnmatchedIf(
            cloneNode(this._kwIf_),
            cloneNode(this._cond_),
            cloneNode(this._kwThen_),
            cloneNode(this._matched_),
            cloneNode(this._kwElse_),
            cloneNode(this._unmatched_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWithElseUnmatchedIf(this);
    }

    public TKwIf getKwIf()
    {
        return this._kwIf_;
    }

    public void setKwIf(TKwIf node)
    {
        if(this._kwIf_ != null)
        {
            this._kwIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwIf_ = node;
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TKwThen getKwThen()
    {
        return this._kwThen_;
    }

    public void setKwThen(TKwThen node)
    {
        if(this._kwThen_ != null)
        {
            this._kwThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwThen_ = node;
    }

    public PMatched getMatched()
    {
        return this._matched_;
    }

    public void setMatched(PMatched node)
    {
        if(this._matched_ != null)
        {
            this._matched_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._matched_ = node;
    }

    public TKwElse getKwElse()
    {
        return this._kwElse_;
    }

    public void setKwElse(TKwElse node)
    {
        if(this._kwElse_ != null)
        {
            this._kwElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwElse_ = node;
    }

    public PUnmatched getUnmatched()
    {
        return this._unmatched_;
    }

    public void setUnmatched(PUnmatched node)
    {
        if(this._unmatched_ != null)
        {
            this._unmatched_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unmatched_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwIf_)
            + toString(this._cond_)
            + toString(this._kwThen_)
            + toString(this._matched_)
            + toString(this._kwElse_)
            + toString(this._unmatched_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwIf_ == child)
        {
            this._kwIf_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._kwThen_ == child)
        {
            this._kwThen_ = null;
            return;
        }

        if(this._matched_ == child)
        {
            this._matched_ = null;
            return;
        }

        if(this._kwElse_ == child)
        {
            this._kwElse_ = null;
            return;
        }

        if(this._unmatched_ == child)
        {
            this._unmatched_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwIf_ == oldChild)
        {
            setKwIf((TKwIf) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        if(this._kwThen_ == oldChild)
        {
            setKwThen((TKwThen) newChild);
            return;
        }

        if(this._matched_ == oldChild)
        {
            setMatched((PMatched) newChild);
            return;
        }

        if(this._kwElse_ == oldChild)
        {
            setKwElse((TKwElse) newChild);
            return;
        }

        if(this._unmatched_ == oldChild)
        {
            setUnmatched((PUnmatched) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

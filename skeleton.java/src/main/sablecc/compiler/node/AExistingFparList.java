/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AExistingFparList extends PFparList
{
    private final LinkedList<PVarDef> _vars_ = new LinkedList<PVarDef>();

    public AExistingFparList()
    {
        // Constructor
    }

    public AExistingFparList(
        @SuppressWarnings("hiding") List<?> _vars_)
    {
        // Constructor
        setVars(_vars_);

    }

    @Override
    public Object clone()
    {
        return new AExistingFparList(
            cloneList(this._vars_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExistingFparList(this);
    }

    public LinkedList<PVarDef> getVars()
    {
        return this._vars_;
    }

    public void setVars(List<?> list)
    {
        for(PVarDef e : this._vars_)
        {
            e.parent(null);
        }
        this._vars_.clear();

        for(Object obj_e : list)
        {
            PVarDef e = (PVarDef) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._vars_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._vars_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._vars_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PVarDef> i = this._vars_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

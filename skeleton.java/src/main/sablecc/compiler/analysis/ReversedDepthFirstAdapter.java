/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAOneProgram(AOneProgram node)
    {
        defaultIn(node);
    }

    public void outAOneProgram(AOneProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneProgram(AOneProgram node)
    {
        inAOneProgram(node);
        {
            List<PVariableDefinition> copy = new ArrayList<PVariableDefinition>(node.getVariableDefinition());
            Collections.reverse(copy);
            for(PVariableDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outAOneProgram(node);
    }

    public void inATwoVariableDefinition(ATwoVariableDefinition node)
    {
        defaultIn(node);
    }

    public void outATwoVariableDefinition(ATwoVariableDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATwoVariableDefinition(ATwoVariableDefinition node)
    {
        inATwoVariableDefinition(node);
        if(node.getCmdEnd() != null)
        {
            node.getCmdEnd().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getDeftype() != null)
        {
            node.getDeftype().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outATwoVariableDefinition(node);
    }

    public void inATIntType(ATIntType node)
    {
        defaultIn(node);
    }

    public void outATIntType(ATIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATIntType(ATIntType node)
    {
        inATIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outATIntType(node);
    }

    public void inATCharType(ATCharType node)
    {
        defaultIn(node);
    }

    public void outATCharType(ATCharType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATCharType(ATCharType node)
    {
        inATCharType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outATCharType(node);
    }
}

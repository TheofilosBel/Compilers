/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAVarsProgram(AVarsProgram node)
    {
        defaultIn(node);
    }

    public void outAVarsProgram(AVarsProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarsProgram(AVarsProgram node)
    {
        inAVarsProgram(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVarsProgram(node);
    }

    public void inAVarStartCharVariable(AVarStartCharVariable node)
    {
        defaultIn(node);
    }

    public void outAVarStartCharVariable(AVarStartCharVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarStartCharVariable(AVarStartCharVariable node)
    {
        inAVarStartCharVariable(node);
        if(node.getVars() != null)
        {
            node.getVars().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarStartCharVariable(node);
    }

    public void inAVarStartCharsVars(AVarStartCharsVars node)
    {
        defaultIn(node);
    }

    public void outAVarStartCharsVars(AVarStartCharsVars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarStartCharsVars(AVarStartCharsVars node)
    {
        inAVarStartCharsVars(node);
        {
            List<TChars> copy = new ArrayList<TChars>(node.getChars());
            Collections.reverse(copy);
            for(TChars e : copy)
            {
                e.apply(this);
            }
        }
        outAVarStartCharsVars(node);
    }

    public void inAVarNumVars(AVarNumVars node)
    {
        defaultIn(node);
    }

    public void outAVarNumVars(AVarNumVars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarNumVars(AVarNumVars node)
    {
        inAVarNumVars(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outAVarNumVars(node);
    }

    public void inAVarCharsVars(AVarCharsVars node)
    {
        defaultIn(node);
    }

    public void outAVarCharsVars(AVarCharsVars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarCharsVars(AVarCharsVars node)
    {
        inAVarCharsVars(node);
        if(node.getChars() != null)
        {
            node.getChars().apply(this);
        }
        outAVarCharsVars(node);
    }

    public void inALoopVarsVars(ALoopVarsVars node)
    {
        defaultIn(node);
    }

    public void outALoopVarsVars(ALoopVarsVars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopVarsVars(ALoopVarsVars node)
    {
        inALoopVarsVars(node);
        if(node.getVars() != null)
        {
            node.getVars().apply(this);
        }
        outALoopVarsVars(node);
    }
}

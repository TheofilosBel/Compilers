/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInnerDeclLocalDef(AInnerDeclLocalDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInnerDefLocalDef(AInnerDefLocalDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInnerVarLocalDef(AInnerVarLocalDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiFparList(AMultiFparList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleFparList(ASingleFparList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFparDef(AFparDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiIdList(AMultiIdList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleIdList(ASingleIdList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAType(AType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataRetType(ADataRetType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedStmt(AMatchedStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnmatchedStmt(AUnmatchedStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfMatched(AIfMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileMatched(AWhileMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoopMatched(ANoopMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignMatched(AAssignMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockMatched(ABlockMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCallMatched(AFuncCallMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnMatched(AReturnMatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfUnmatched(AIfUnmatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileUnmatched(AWhileUnmatched node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedIf(AMatchedIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoElseUnmatchedIf(ANoElseUnmatchedIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithElseUnmatchedIf(AWithElseUnmatchedIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMatchedWhile(AMatchedWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnmatchedWhile(AUnmatchedWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiExprList(AMultiExprList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyExprList(AEmptyExprList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprListTail(AExprListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayDeclArrayDeclarator(AArrayDeclArrayDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoArrayDeclArrayDeclarator(ANoArrayDeclArrayDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayDeclaratorTail(AArrayDeclaratorTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyArrayDeclarator(AEmptyArrayDeclarator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdLValue(AIdLValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrLValue(AStrLValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprLValue(AExprLValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASFactorTerm(ASFactorTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPosSignedFactor(APosSignedFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegSignedFactor(ANegSignedFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorSignedFactor(AFactorSignedFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntFactor(AIntFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharFactor(ACharFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALvalFactor(ALvalFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncFactor(AFuncFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParensFactor(AParensFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrCond(AOrCond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACond1Cond(ACond1Cond node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndCond1(AAndCond1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACond2Cond1(ACond2Cond1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotCond2(ANotCond2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACond3Cond2(ACond3Cond2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprCmpCond3(AExprCmpCond3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolCond3(ABoolCond3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueBool(ATrueBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseBool(AFalseBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACParensBool(ACParensBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqCmpOp(AEqCmpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqCmpOp(ANeqCmpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtCmpOp(ALtCmpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtCmpOp(AGtCmpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeqCmpOp(ALeqCmpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGeqCmpOp(AGeqCmpOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwAnd(TKwAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwOr(TKwOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwInt(TKwInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwThen(TKwThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwChar(TKwChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwMod(TKwMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwVar(TKwVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwDiv(TKwDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwNot(TKwNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwWhile(TKwWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwDo(TKwDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwIf(TKwIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwElse(TKwElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwFun(TKwFun node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwReturn(TKwReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwRef(TKwRef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwNothing(TKwNothing node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntConst(TIntConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharConst(TCharConst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
